{"remainingRequest":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GIT\\server-side\\src\\layouts\\components\\vx-tooltip\\VxTooltip.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\src\\layouts\\components\\vx-tooltip\\VxTooltip.vue","mtime":1567376724542},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport utils from '@/assets/utils'\r\nimport _color from '@/assets/utils/color.js'\r\nexport default {\r\n  name:'vx-tooltip',\r\n  props:{\r\n    title:{\r\n      default:null,\r\n      type:[String,Number]\r\n    },\r\n    text:{\r\n      default:null,\r\n      type:[String,Number]\r\n    },\r\n    color:{\r\n      default:null,\r\n      type:String\r\n    },\r\n    position:{\r\n      default:'top',\r\n      type:String\r\n    },\r\n    delay:{\r\n      default:'0s',\r\n      type:[Number,String]\r\n    }\r\n  },\r\n  data:()=>({\r\n    cords:{},\r\n    active:false,\r\n    widthx: 'auto',\r\n    positionx: null,\r\n    noneAfter: false\r\n  }),\r\n  computed:{\r\n    style(){\r\n      return {\r\n        left:this.cords.left,\r\n        top:this.cords.top,\r\n        transitionDelay: this.active?this.delay:'0s',\r\n        background:_color.getColor(this.color,1),\r\n        width: this.widthx\r\n      }\r\n    }\r\n  },\r\n  methods:{\r\n    mouseoverx(){\r\n      this.active = true\r\n      this.$nextTick(()=>{\r\n        utils.insertBody(this.$refs.vstooltip)\r\n        this.changePosition(this.$refs.convstooltip,this.$refs.vstooltip)\r\n      })\r\n    },\r\n    mouseoutx(){\r\n      this.active = false\r\n    },\r\n    changePosition(elxEvent, tooltip){\r\n      this.noneAfter = false\r\n      this.positionx = null\r\n      let elx = elxEvent.closest('.con-vs-tooltip')\r\n      let scrollTopx = window.pageYOffset || document.documentElement.scrollTop;\r\n      let topx = elx.getBoundingClientRect().top + scrollTopx - tooltip.clientHeight - 4\r\n      let leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 + elx.clientWidth / 2\r\n      let widthx = elx.clientWidth\r\n\r\n      if(this.position == 'bottom'){\r\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\r\n      } else if (this.position == 'left') {\r\n        leftx = elx.getBoundingClientRect().left - tooltip.clientWidth - 4\r\n        topx = elx.getBoundingClientRect().top + scrollTopx + (elx.clientHeight / 2) - (tooltip.clientHeight / 2)\r\n        if (Math.sign(leftx)==-1) {\r\n          leftx = elx.getBoundingClientRect().left\r\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\r\n          this.positionx = 'bottom'\r\n          this.noneAfter = true\r\n        }\r\n      } else if (this.position == 'right') {\r\n        leftx = elx.getBoundingClientRect().left + elx.clientWidth + 4\r\n        topx = elx.getBoundingClientRect().top + scrollTopx + (elx.clientHeight / 2) - (tooltip.clientHeight / 2)\r\n        if( window.innerWidth - (leftx + tooltip.clientWidth) <= 20) {\r\n          leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 - 10\r\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\r\n          this.positionx = 'bottom'\r\n          this.noneAfter = true\r\n        }\r\n      }\r\n      this.cords = {\r\n        left: `${leftx}px`,\r\n        top: `${topx}px`,\r\n        width: `${widthx}px`\r\n      }\r\n\r\n    },\r\n  }\r\n}\r\n",{"version":3,"sources":["VxTooltip.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"VxTooltip.vue","sourceRoot":"src/layouts/components/vx-tooltip","sourcesContent":["<template>\r\n  <div\r\n    ref=\"convstooltip\"\r\n    class=\"con-vs-tooltip\"\r\n    @mouseout=\"mouseoutx\"\r\n    @mouseover=\"mouseoverx\">\r\n    <transition name=\"tooltip-fade\">\r\n      <div\r\n        v-show=\"active\"\r\n        ref=\"vstooltip\"\r\n        :class=\"[`vs-tooltip-${positionx || position}`,`vs-tooltip-${color}`, {'after-none': noneAfter}]\"\r\n        :style=\"style\"\r\n        class=\"vs-tooltip\">\r\n        <h4 v-if=\"title\">{{ title }}</h4>\r\n        {{ text }}\r\n      </div>\r\n    </transition>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n<script>\r\nimport utils from '@/assets/utils'\r\nimport _color from '@/assets/utils/color.js'\r\nexport default {\r\n  name:'vx-tooltip',\r\n  props:{\r\n    title:{\r\n      default:null,\r\n      type:[String,Number]\r\n    },\r\n    text:{\r\n      default:null,\r\n      type:[String,Number]\r\n    },\r\n    color:{\r\n      default:null,\r\n      type:String\r\n    },\r\n    position:{\r\n      default:'top',\r\n      type:String\r\n    },\r\n    delay:{\r\n      default:'0s',\r\n      type:[Number,String]\r\n    }\r\n  },\r\n  data:()=>({\r\n    cords:{},\r\n    active:false,\r\n    widthx: 'auto',\r\n    positionx: null,\r\n    noneAfter: false\r\n  }),\r\n  computed:{\r\n    style(){\r\n      return {\r\n        left:this.cords.left,\r\n        top:this.cords.top,\r\n        transitionDelay: this.active?this.delay:'0s',\r\n        background:_color.getColor(this.color,1),\r\n        width: this.widthx\r\n      }\r\n    }\r\n  },\r\n  methods:{\r\n    mouseoverx(){\r\n      this.active = true\r\n      this.$nextTick(()=>{\r\n        utils.insertBody(this.$refs.vstooltip)\r\n        this.changePosition(this.$refs.convstooltip,this.$refs.vstooltip)\r\n      })\r\n    },\r\n    mouseoutx(){\r\n      this.active = false\r\n    },\r\n    changePosition(elxEvent, tooltip){\r\n      this.noneAfter = false\r\n      this.positionx = null\r\n      let elx = elxEvent.closest('.con-vs-tooltip')\r\n      let scrollTopx = window.pageYOffset || document.documentElement.scrollTop;\r\n      let topx = elx.getBoundingClientRect().top + scrollTopx - tooltip.clientHeight - 4\r\n      let leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 + elx.clientWidth / 2\r\n      let widthx = elx.clientWidth\r\n\r\n      if(this.position == 'bottom'){\r\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\r\n      } else if (this.position == 'left') {\r\n        leftx = elx.getBoundingClientRect().left - tooltip.clientWidth - 4\r\n        topx = elx.getBoundingClientRect().top + scrollTopx + (elx.clientHeight / 2) - (tooltip.clientHeight / 2)\r\n        if (Math.sign(leftx)==-1) {\r\n          leftx = elx.getBoundingClientRect().left\r\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\r\n          this.positionx = 'bottom'\r\n          this.noneAfter = true\r\n        }\r\n      } else if (this.position == 'right') {\r\n        leftx = elx.getBoundingClientRect().left + elx.clientWidth + 4\r\n        topx = elx.getBoundingClientRect().top + scrollTopx + (elx.clientHeight / 2) - (tooltip.clientHeight / 2)\r\n        if( window.innerWidth - (leftx + tooltip.clientWidth) <= 20) {\r\n          leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 - 10\r\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\r\n          this.positionx = 'bottom'\r\n          this.noneAfter = true\r\n        }\r\n      }\r\n      this.cords = {\r\n        left: `${leftx}px`,\r\n        top: `${topx}px`,\r\n        width: `${widthx}px`\r\n      }\r\n\r\n    },\r\n  }\r\n}\r\n</script>\r\n"]}]}