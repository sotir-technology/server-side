{"remainingRequest":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-echarts\\components\\ECharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-echarts\\components\\ECharts.vue","mtime":1567428705413},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567428497170},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567428476521},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567428497170},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567428708565}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport echarts from 'echarts/lib/echarts'\r\nimport debounce from 'lodash/debounce'\r\nimport { addListener, removeListener } from 'resize-detector'\r\n\r\n// enumerating ECharts events for now\r\nconst EVENTS = [\r\n  'legendselectchanged',\r\n  'legendselected',\r\n  'legendunselected',\r\n  'legendunscroll',\r\n  'datazoom',\r\n  'datarangeselected',\r\n  'timelinechanged',\r\n  'timelineplaychanged',\r\n  'restore',\r\n  'dataviewchanged',\r\n  'magictypechanged',\r\n  'geoselectchanged',\r\n  'geoselected',\r\n  'geounselected',\r\n  'pieselectchanged',\r\n  'pieselected',\r\n  'pieunselected',\r\n  'mapselectchanged',\r\n  'mapselected',\r\n  'mapunselected',\r\n  'axisareaselected',\r\n  'focusnodeadjacency',\r\n  'unfocusnodeadjacency',\r\n  'brush',\r\n  'brushselected',\r\n  'rendered',\r\n  'finished',\r\n  'click',\r\n  'dblclick',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mousedown',\r\n  'mouseup',\r\n  'globalout',\r\n  'contextmenu'\r\n]\r\n\r\nexport default {\r\n  props: {\r\n    options: Object,\r\n    theme: [String, Object],\r\n    initOptions: Object,\r\n    group: String,\r\n    autoResize: Boolean,\r\n    watchShallow: Boolean,\r\n    manualUpdate: Boolean\r\n  },\r\n  data () {\r\n    return {\r\n      lastArea: 0\r\n    }\r\n  },\r\n  watch: {\r\n    group (group) {\r\n      this.chart.group = group\r\n    }\r\n  },\r\n  methods: {\r\n    // provide a explicit merge option method\r\n    mergeOptions (options, notMerge, lazyUpdate) {\r\n      if (this.manualUpdate) {\r\n        this.manualOptions = options\r\n      }\r\n\r\n      if (!this.chart) {\r\n        this.init()\r\n      } else {\r\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate)\r\n      }\r\n    },\r\n    // just delegates ECharts methods to Vue component\r\n    // use explicit params to reduce transpiled size for now\r\n    appendData (params) {\r\n      this.delegateMethod('appendData', params)\r\n    },\r\n    resize (options) {\r\n      this.delegateMethod('resize', options)\r\n    },\r\n    dispatchAction (payload) {\r\n      this.delegateMethod('dispatchAction', payload)\r\n    },\r\n    convertToPixel (finder, value) {\r\n      return this.delegateMethod('convertToPixel', finder, value)\r\n    },\r\n    convertFromPixel (finder, value) {\r\n      return this.delegateMethod('convertFromPixel', finder, value)\r\n    },\r\n    containPixel (finder, value) {\r\n      return this.delegateMethod('containPixel', finder, value)\r\n    },\r\n    showLoading (type, options) {\r\n      this.delegateMethod('showLoading', type, options)\r\n    },\r\n    hideLoading () {\r\n      this.delegateMethod('hideLoading')\r\n    },\r\n    getDataURL (options) {\r\n      return this.delegateMethod('getDataURL', options)\r\n    },\r\n    getConnectedDataURL (options) {\r\n      return this.delegateMethod('getConnectedDataURL', options)\r\n    },\r\n    clear () {\r\n      this.delegateMethod('clear')\r\n    },\r\n    dispose () {\r\n      this.delegateMethod('dispose')\r\n    },\r\n    delegateMethod (name, ...args) {\r\n      if (!this.chart) {\r\n        this.init()\r\n      }\r\n      return this.chart[name](...args)\r\n    },\r\n    delegateGet (name, method) {\r\n      if (!this.chart) {\r\n        this.init()\r\n      }\r\n      return this.chart[method]()\r\n    },\r\n    getArea () {\r\n      return this.$el.offsetWidth * this.$el.offsetHeight\r\n    },\r\n    init () {\r\n      if (this.chart) {\r\n        return\r\n      }\r\n\r\n      let chart = echarts.init(this.$el, this.theme, this.initOptions)\r\n\r\n      if (this.group) {\r\n        chart.group = this.group\r\n      }\r\n\r\n      chart.setOption(this.manualOptions || this.options || {}, true)\r\n\r\n      // expose ECharts events as custom events\r\n      EVENTS.forEach(event => {\r\n        chart.on(event, params => {\r\n          this.$emit(event, params)\r\n        })\r\n      })\r\n\r\n      if (this.autoResize) {\r\n        this.lastArea = this.getArea()\r\n        this.__resizeHandler = debounce(() => {\r\n          if (this.lastArea === 0) {\r\n            // emulate initial render for initially hidden charts\r\n            this.mergeOptions({}, true)\r\n            this.resize()\r\n            this.mergeOptions(this.options || this.manualOptions || {}, true)\r\n          } else {\r\n            this.resize()\r\n          }\r\n          this.lastArea = this.getArea()\r\n        }, 100, { leading: true })\r\n        addListener(this.$el, this.__resizeHandler)\r\n      }\r\n\r\n      Object.defineProperties(this, {\r\n        // Only recalculated when accessed from JavaScript.\r\n        // Won't update DOM on value change because getters\r\n        // don't depend on reactive values\r\n        width: {\r\n          configurable: true,\r\n          get: () => {\r\n            return this.delegateGet('width', 'getWidth')\r\n          }\r\n        },\r\n        height: {\r\n          configurable: true,\r\n          get: () => {\r\n            return this.delegateGet('height', 'getHeight')\r\n          }\r\n        },\r\n        isDisposed: {\r\n          configurable: true,\r\n          get: () => {\r\n            return !!this.delegateGet('isDisposed', 'isDisposed')\r\n          }\r\n        },\r\n        computedOptions: {\r\n          configurable: true,\r\n          get: () => {\r\n            return this.delegateGet('computedOptions', 'getOption')\r\n          }\r\n        }\r\n      })\r\n\r\n      this.chart = chart\r\n    },\r\n    destroy () {\r\n      if (this.autoResize) {\r\n        removeListener(this.$el, this.__resizeHandler)\r\n      }\r\n      this.dispose()\r\n      this.chart = null\r\n    },\r\n    refresh () {\r\n      if (this.chart) {\r\n        this.destroy()\r\n        this.init()\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    if (!this.manualUpdate) {\r\n      this.$watch('options', (val, oldVal) => {\r\n        if (!this.chart && val) {\r\n          this.init()\r\n        } else {\r\n          // mutating `options` will lead to merging\r\n          // replacing it with new reference will lead to not merging\r\n          // eg.\r\n          // `this.options = Object.assign({}, this.options, { ... })`\r\n          // will trigger `this.chart.setOption(val, true)\r\n          // `this.options.title.text = 'Trends'`\r\n          // will trigger `this.chart.setOption(val, false)`\r\n          this.chart.setOption(val, val !== oldVal)\r\n        }\r\n      }, { deep: !this.watchShallow })\r\n    }\r\n\r\n    let watched = ['theme', 'initOptions', 'autoResize', 'manualUpdate', 'watchShallow']\r\n    watched.forEach(prop => {\r\n      this.$watch(prop, () => {\r\n        this.refresh()\r\n      }, { deep: true })\r\n    })\r\n  },\r\n  mounted () {\r\n    // auto init if `options` is already provided\r\n    if (this.options) {\r\n      this.init()\r\n    }\r\n  },\r\n  activated () {\r\n    if (this.autoResize) {\r\n      this.chart && this.chart.resize()\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    if (!this.chart) {\r\n      return\r\n    }\r\n    this.destroy()\r\n  },\r\n  connect (group) {\r\n    if (typeof group !== 'string') {\r\n      group = group.map(chart => chart.chart)\r\n    }\r\n    echarts.connect(group)\r\n  },\r\n  disconnect (group) {\r\n    echarts.disConnect(group)\r\n  },\r\n  registerMap (mapName, geoJSON, specialAreas) {\r\n    echarts.registerMap(mapName, geoJSON, specialAreas)\r\n  },\r\n  registerTheme (name, theme) {\r\n    echarts.registerTheme(name, theme)\r\n  },\r\n  graphic: echarts.graphic\r\n}\r\n",{"version":3,"sources":["ECharts.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ECharts.vue","sourceRoot":"node_modules/vue-echarts/components","sourcesContent":["<template>\r\n<div class=\"echarts\"/>\r\n</template>\r\n\r\n<style>\r\n.echarts {\r\n  width: 600px;\r\n  height: 400px;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport echarts from 'echarts/lib/echarts'\r\nimport debounce from 'lodash/debounce'\r\nimport { addListener, removeListener } from 'resize-detector'\r\n\r\n// enumerating ECharts events for now\r\nconst EVENTS = [\r\n  'legendselectchanged',\r\n  'legendselected',\r\n  'legendunselected',\r\n  'legendunscroll',\r\n  'datazoom',\r\n  'datarangeselected',\r\n  'timelinechanged',\r\n  'timelineplaychanged',\r\n  'restore',\r\n  'dataviewchanged',\r\n  'magictypechanged',\r\n  'geoselectchanged',\r\n  'geoselected',\r\n  'geounselected',\r\n  'pieselectchanged',\r\n  'pieselected',\r\n  'pieunselected',\r\n  'mapselectchanged',\r\n  'mapselected',\r\n  'mapunselected',\r\n  'axisareaselected',\r\n  'focusnodeadjacency',\r\n  'unfocusnodeadjacency',\r\n  'brush',\r\n  'brushselected',\r\n  'rendered',\r\n  'finished',\r\n  'click',\r\n  'dblclick',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mousedown',\r\n  'mouseup',\r\n  'globalout',\r\n  'contextmenu'\r\n]\r\n\r\nexport default {\r\n  props: {\r\n    options: Object,\r\n    theme: [String, Object],\r\n    initOptions: Object,\r\n    group: String,\r\n    autoResize: Boolean,\r\n    watchShallow: Boolean,\r\n    manualUpdate: Boolean\r\n  },\r\n  data () {\r\n    return {\r\n      lastArea: 0\r\n    }\r\n  },\r\n  watch: {\r\n    group (group) {\r\n      this.chart.group = group\r\n    }\r\n  },\r\n  methods: {\r\n    // provide a explicit merge option method\r\n    mergeOptions (options, notMerge, lazyUpdate) {\r\n      if (this.manualUpdate) {\r\n        this.manualOptions = options\r\n      }\r\n\r\n      if (!this.chart) {\r\n        this.init()\r\n      } else {\r\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate)\r\n      }\r\n    },\r\n    // just delegates ECharts methods to Vue component\r\n    // use explicit params to reduce transpiled size for now\r\n    appendData (params) {\r\n      this.delegateMethod('appendData', params)\r\n    },\r\n    resize (options) {\r\n      this.delegateMethod('resize', options)\r\n    },\r\n    dispatchAction (payload) {\r\n      this.delegateMethod('dispatchAction', payload)\r\n    },\r\n    convertToPixel (finder, value) {\r\n      return this.delegateMethod('convertToPixel', finder, value)\r\n    },\r\n    convertFromPixel (finder, value) {\r\n      return this.delegateMethod('convertFromPixel', finder, value)\r\n    },\r\n    containPixel (finder, value) {\r\n      return this.delegateMethod('containPixel', finder, value)\r\n    },\r\n    showLoading (type, options) {\r\n      this.delegateMethod('showLoading', type, options)\r\n    },\r\n    hideLoading () {\r\n      this.delegateMethod('hideLoading')\r\n    },\r\n    getDataURL (options) {\r\n      return this.delegateMethod('getDataURL', options)\r\n    },\r\n    getConnectedDataURL (options) {\r\n      return this.delegateMethod('getConnectedDataURL', options)\r\n    },\r\n    clear () {\r\n      this.delegateMethod('clear')\r\n    },\r\n    dispose () {\r\n      this.delegateMethod('dispose')\r\n    },\r\n    delegateMethod (name, ...args) {\r\n      if (!this.chart) {\r\n        this.init()\r\n      }\r\n      return this.chart[name](...args)\r\n    },\r\n    delegateGet (name, method) {\r\n      if (!this.chart) {\r\n        this.init()\r\n      }\r\n      return this.chart[method]()\r\n    },\r\n    getArea () {\r\n      return this.$el.offsetWidth * this.$el.offsetHeight\r\n    },\r\n    init () {\r\n      if (this.chart) {\r\n        return\r\n      }\r\n\r\n      let chart = echarts.init(this.$el, this.theme, this.initOptions)\r\n\r\n      if (this.group) {\r\n        chart.group = this.group\r\n      }\r\n\r\n      chart.setOption(this.manualOptions || this.options || {}, true)\r\n\r\n      // expose ECharts events as custom events\r\n      EVENTS.forEach(event => {\r\n        chart.on(event, params => {\r\n          this.$emit(event, params)\r\n        })\r\n      })\r\n\r\n      if (this.autoResize) {\r\n        this.lastArea = this.getArea()\r\n        this.__resizeHandler = debounce(() => {\r\n          if (this.lastArea === 0) {\r\n            // emulate initial render for initially hidden charts\r\n            this.mergeOptions({}, true)\r\n            this.resize()\r\n            this.mergeOptions(this.options || this.manualOptions || {}, true)\r\n          } else {\r\n            this.resize()\r\n          }\r\n          this.lastArea = this.getArea()\r\n        }, 100, { leading: true })\r\n        addListener(this.$el, this.__resizeHandler)\r\n      }\r\n\r\n      Object.defineProperties(this, {\r\n        // Only recalculated when accessed from JavaScript.\r\n        // Won't update DOM on value change because getters\r\n        // don't depend on reactive values\r\n        width: {\r\n          configurable: true,\r\n          get: () => {\r\n            return this.delegateGet('width', 'getWidth')\r\n          }\r\n        },\r\n        height: {\r\n          configurable: true,\r\n          get: () => {\r\n            return this.delegateGet('height', 'getHeight')\r\n          }\r\n        },\r\n        isDisposed: {\r\n          configurable: true,\r\n          get: () => {\r\n            return !!this.delegateGet('isDisposed', 'isDisposed')\r\n          }\r\n        },\r\n        computedOptions: {\r\n          configurable: true,\r\n          get: () => {\r\n            return this.delegateGet('computedOptions', 'getOption')\r\n          }\r\n        }\r\n      })\r\n\r\n      this.chart = chart\r\n    },\r\n    destroy () {\r\n      if (this.autoResize) {\r\n        removeListener(this.$el, this.__resizeHandler)\r\n      }\r\n      this.dispose()\r\n      this.chart = null\r\n    },\r\n    refresh () {\r\n      if (this.chart) {\r\n        this.destroy()\r\n        this.init()\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    if (!this.manualUpdate) {\r\n      this.$watch('options', (val, oldVal) => {\r\n        if (!this.chart && val) {\r\n          this.init()\r\n        } else {\r\n          // mutating `options` will lead to merging\r\n          // replacing it with new reference will lead to not merging\r\n          // eg.\r\n          // `this.options = Object.assign({}, this.options, { ... })`\r\n          // will trigger `this.chart.setOption(val, true)\r\n          // `this.options.title.text = 'Trends'`\r\n          // will trigger `this.chart.setOption(val, false)`\r\n          this.chart.setOption(val, val !== oldVal)\r\n        }\r\n      }, { deep: !this.watchShallow })\r\n    }\r\n\r\n    let watched = ['theme', 'initOptions', 'autoResize', 'manualUpdate', 'watchShallow']\r\n    watched.forEach(prop => {\r\n      this.$watch(prop, () => {\r\n        this.refresh()\r\n      }, { deep: true })\r\n    })\r\n  },\r\n  mounted () {\r\n    // auto init if `options` is already provided\r\n    if (this.options) {\r\n      this.init()\r\n    }\r\n  },\r\n  activated () {\r\n    if (this.autoResize) {\r\n      this.chart && this.chart.resize()\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    if (!this.chart) {\r\n      return\r\n    }\r\n    this.destroy()\r\n  },\r\n  connect (group) {\r\n    if (typeof group !== 'string') {\r\n      group = group.map(chart => chart.chart)\r\n    }\r\n    echarts.connect(group)\r\n  },\r\n  disconnect (group) {\r\n    echarts.disConnect(group)\r\n  },\r\n  registerMap (mapName, geoJSON, specialAreas) {\r\n    echarts.registerMap(mapName, geoJSON, specialAreas)\r\n  },\r\n  registerTheme (name, theme) {\r\n    echarts.registerTheme(name, theme)\r\n  },\r\n  graphic: echarts.graphic\r\n}\r\n</script>\r\n"]}]}