{"remainingRequest":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/revelation/VueJS/WnC_Apps/wc_admin/src/components/vx-auto-suggest/VxAutoSuggest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/src/components/vx-auto-suggest/VxAutoSuggest.vue","mtime":1557525828000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default{\n\tprops: {\n\t\tplaceholder: {\n\t\t\ttype: String,\n\t\t\tdefault: 'Search..'\n\t\t},\n\t\tdata: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\tshowAction: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tinputClassses: {\n\t\t\ttype: [String, Object, Array],\n\t\t},\n\t\tautoFocus: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tshowPinned: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\tbackgroundOverlay: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\tsearchLimit: {\n\t\t\ttype: Number,\n\t\t\tdefault: 10\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tsearchQuery: '',\n\t\t\tfilteredData: [],\n\t\t\tcurrentSelected: -1,\n\t\t\tinputFocused: false,\n\t\t\tinsideSuggestions: false,\n\t\t}\n\t},\n\twatch: {\n\t\t// UPDATE SUGGESTIONS LIST\n\t\tsearchQuery(val) {\n\t\t\tif(val == '') {\n\t\t\t\tthis.inputInit();\n\t\t\t\tif(this.bodyOverlay) this.$store.commit('TOGGLE_CONTENT_OVERLAY', false);\n\t\t\t}else {\n\t\t\t\tif(this.backgroundOverlay && !this.bodyOverlay) this.$store.commit('TOGGLE_CONTENT_OVERLAY', true);\n\t\t\t\tlet exactEle = this.data.data.filter((item) => {\n\t\t\t\t\treturn item.label.toLowerCase().startsWith(this.searchQuery.toLowerCase())\n\t\t\t\t});\n\t\t\t\tlet containEle = this.data.data.filter((item) => {\n\t\t\t\t\treturn !item.label.toLowerCase().startsWith(this.searchQuery.toLowerCase()) && item.label.toLowerCase().indexOf(this.searchQuery.toLowerCase()) > -1\n\t\t\t\t});\n\t\t\t\tthis.filteredData = exactEle.concat(containEle).slice(0,this.searchLimit)\n\t\t\t\tif(!this.filteredData[0]) this.currentSelected = -1\n\t\t\t}\n\n\t\t\t// ADD: No result found\n\t\t\tif(!this.filteredData.length && this.searchQuery) {\n\t\t\t\tthis.filteredData = [{\n\t\t\t\t\thighlightAction: false,\n\t\t\t\t\tindex: -1,\n\t\t\t\t\tlabel: 'No results found.',\n\t\t\t\t\tlabelIcon: 'AlertCircleIcon',\n\t\t\t\t\turl: null,\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tautoFocus(val) {\n\t\t\tif(val) this.focusInput();\n\t\t\telse this.searchQuery = '';\n\t\t},\n\t\tfilteredData() {\n\t\t\tif(this.currentSelected < 0 && this.filteredData.length) {\n\t\t\t\tthis.currentSelected = 0;\n\t\t\t}\n\t\t\t// Prevent selecting if first item in list dont have url e.g. 'No Reult'\n\t\t\tif(this.filteredData[0]){\n\t\t\t\tif(!this.filteredData[0].url) {\n\t\t\t\t\tthis.currentSelected = -1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tcomputed: {\n\t\tbodyOverlay() {\n\t\t\treturn this.$store.state.bodyOverlay;\n\t\t},\n\t\tactionClasses() {\n\t\t\treturn (isHighlighted) => {\n\t\t\t\tif(isHighlighted) return `stroke-current text-${this.data.highlightColor}`\n\t\t\t}\n\t\t}\n\t},\n\tmethods: {\n\t\tescPressed() {\n\t\t\tthis.$emit('closeSearchbar')\n\t\t\tthis.searchQuery = '';\n\t\t\tthis.filteredData = [];\n\t\t},\n\t\tinputInit() {\n\t\t\tif(this.showPinned) {\n\t\t\t\tconst starredData = this.data.data.filter((item) => item.highlightAction)\n\t\t\t\tthis.filteredData = starredData;\n\t\t\t}else {\n\t\t\t\tthis.filteredData = [];\n\t\t\t}\n\t\t},\n\t\tupdateInputFocus(val = true) {\n\t\t\tif(val) {\n\t\t\t\tif(this.searchQuery == '') this.inputInit();\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.inputFocused = true;\n\t\t\t\t}, 100)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(this.insideSuggestions) return\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.inputFocused = false;\n\t\t\t\t}, 100)\n\t\t\t\tthis.escPressed();\n\t\t\t}\n\t\t},\n\t\tsuggestionSelected() {\n\t\t\tif(this.bodyOverlay && this.filteredData[0].url) this.$store.commit('TOGGLE_CONTENT_OVERLAY', false);\n\t\t\tif(this.filteredData.length) {\n\t\t\t\tif(this.filteredData[0].url){\n\t\t\t\t\tthis.searchQuery = '';\n\t\t\t\t\tif(this.currentSelected >= 0 ) this.$emit('selected', this.filteredData[this.currentSelected])\n\t\t\t\t\telse this.$emit('selected', this.filteredData[0])\n\t\t\t\t\tthis.filteredData = [];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tactionClicked() {\n\t\t\tthis.$emit('actionClicked', this.filteredData[this.currentSelected])\n\t\t\tif(!this.filteredData[this.currentSelected].highlightAction) this.filteredData.splice(this.currentSelected, 1)\n\t\t},\n\t\tincreaseIndex(val = false) {\n\t\t\tif(!val && this.currentSelected > 0) this.currentSelected--\n\t\t\telse if(val && (this.currentSelected < this.filteredData.length-1) && (this.filteredData[this.currentSelected+1].index > -1)) this.currentSelected++\n\t\t\tthis.fixScrolling();\n\t\t},\n\t\tfocusInput() {\n\t\t\tthis.$refs.input.$el.querySelector('input').focus();\n\t\t},\n\t\tfixScrolling() {\n\t\t\tif(this.currentSelected > 0) {\n\t\t\t\tconst liH = this.$refs.option[this.currentSelected].clientHeight;\n\t\t\t\tconst ulH = this.$refs.scrollContainer.clientHeight;\n\t\t\t\tif(ulH - (liH * this.currentSelected) < liH){\n\t\t\t\t\tthis.$refs.scrollContainer.scrollTop = Math.round(((this.currentSelected+1) - (ulH / liH)+1) * liH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tmounted() {\n\t\tif(this.autoFocus) this.focusInput();\n\t}\n}\n",{"version":3,"sources":["VxAutoSuggest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VxAutoSuggest.vue","sourceRoot":"src/components/vx-auto-suggest","sourcesContent":["<template>\n\t<div class=\"vx-auto-suggest\">\n\t\t<div class=\"flex items-center relative\">\n\t\t\t<vs-input :placeholder=\"placeholder\" ref=\"input\" :class=\"inputClassses\" class=\"z-50\" icon-pack='feather' icon='icon-search' icon-no-border v-model=\"searchQuery\" @keyup.esc=\"escPressed\" @keyup.up=\"increaseIndex(false)\" @keyup.down=\"increaseIndex\" @keyup.enter=\"suggestionSelected\" @focus=\"updateInputFocus\" @blur=\"updateInputFocus(false)\"></vs-input>\n\t\t</div>\n\t\t<ul ref=\"scrollContainer\" class=\"auto-suggest-suggestions-list z-50 rounded-lg mt-2 shadow-lg overflow-hidden\" :class=\"{'hidden': !inputFocused}\" @mouseenter=\"insideSuggestions = true\" @mouseleave=\"insideSuggestions = false\" @focus=\"updateInputFocus\" @blur=\"updateInputFocus(false)\" tabindex=\"-1\">\n\t\t\t<li\n\t\t\t\tref=\"option\"\n\t\t\t\tclass=\"auto-suggest__suggestion flex items-center justify-between py-3 cursor-pointer\"\n\t\t\t\tv-for=\"(suggestion, index) in filteredData\"\n\t\t\t\t:key=\"index\"\n\t\t\t\t:class=\"{'vx-auto-suggest__current-selected': currentSelected == index, 'pointer-events-none': suggestion.index < 0}\"\n\t\t\t\t@mouseenter=\"currentSelected = index\"\n\t\t\t\t@click=\"suggestionSelected\">\n\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<feather-icon :icon=\"suggestion.labelIcon\" svgClasses=\"h-5 w-5\" class=\"mr-4\"></feather-icon>\n\t\t\t\t\t<span>{{ suggestion.label }}</span>\n\t\t\t\t</div>\n\t\t\t\t<feather-icon v-if=\"showAction\" :icon=\"data.actionIcon\" :svgClasses=\"[actionClasses(suggestion.highlightAction), 'h-5 w-5']\" @click.stop=\"actionClicked\"></feather-icon>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</template>\n\n<script>\nexport default{\n\tprops: {\n\t\tplaceholder: {\n\t\t\ttype: String,\n\t\t\tdefault: 'Search..'\n\t\t},\n\t\tdata: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\tshowAction: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tinputClassses: {\n\t\t\ttype: [String, Object, Array],\n\t\t},\n\t\tautoFocus: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tshowPinned: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\tbackgroundOverlay: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\tsearchLimit: {\n\t\t\ttype: Number,\n\t\t\tdefault: 10\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tsearchQuery: '',\n\t\t\tfilteredData: [],\n\t\t\tcurrentSelected: -1,\n\t\t\tinputFocused: false,\n\t\t\tinsideSuggestions: false,\n\t\t}\n\t},\n\twatch: {\n\t\t// UPDATE SUGGESTIONS LIST\n\t\tsearchQuery(val) {\n\t\t\tif(val == '') {\n\t\t\t\tthis.inputInit();\n\t\t\t\tif(this.bodyOverlay) this.$store.commit('TOGGLE_CONTENT_OVERLAY', false);\n\t\t\t}else {\n\t\t\t\tif(this.backgroundOverlay && !this.bodyOverlay) this.$store.commit('TOGGLE_CONTENT_OVERLAY', true);\n\t\t\t\tlet exactEle = this.data.data.filter((item) => {\n\t\t\t\t\treturn item.label.toLowerCase().startsWith(this.searchQuery.toLowerCase())\n\t\t\t\t});\n\t\t\t\tlet containEle = this.data.data.filter((item) => {\n\t\t\t\t\treturn !item.label.toLowerCase().startsWith(this.searchQuery.toLowerCase()) && item.label.toLowerCase().indexOf(this.searchQuery.toLowerCase()) > -1\n\t\t\t\t});\n\t\t\t\tthis.filteredData = exactEle.concat(containEle).slice(0,this.searchLimit)\n\t\t\t\tif(!this.filteredData[0]) this.currentSelected = -1\n\t\t\t}\n\n\t\t\t// ADD: No result found\n\t\t\tif(!this.filteredData.length && this.searchQuery) {\n\t\t\t\tthis.filteredData = [{\n\t\t\t\t\thighlightAction: false,\n\t\t\t\t\tindex: -1,\n\t\t\t\t\tlabel: 'No results found.',\n\t\t\t\t\tlabelIcon: 'AlertCircleIcon',\n\t\t\t\t\turl: null,\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tautoFocus(val) {\n\t\t\tif(val) this.focusInput();\n\t\t\telse this.searchQuery = '';\n\t\t},\n\t\tfilteredData() {\n\t\t\tif(this.currentSelected < 0 && this.filteredData.length) {\n\t\t\t\tthis.currentSelected = 0;\n\t\t\t}\n\t\t\t// Prevent selecting if first item in list dont have url e.g. 'No Reult'\n\t\t\tif(this.filteredData[0]){\n\t\t\t\tif(!this.filteredData[0].url) {\n\t\t\t\t\tthis.currentSelected = -1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tcomputed: {\n\t\tbodyOverlay() {\n\t\t\treturn this.$store.state.bodyOverlay;\n\t\t},\n\t\tactionClasses() {\n\t\t\treturn (isHighlighted) => {\n\t\t\t\tif(isHighlighted) return `stroke-current text-${this.data.highlightColor}`\n\t\t\t}\n\t\t}\n\t},\n\tmethods: {\n\t\tescPressed() {\n\t\t\tthis.$emit('closeSearchbar')\n\t\t\tthis.searchQuery = '';\n\t\t\tthis.filteredData = [];\n\t\t},\n\t\tinputInit() {\n\t\t\tif(this.showPinned) {\n\t\t\t\tconst starredData = this.data.data.filter((item) => item.highlightAction)\n\t\t\t\tthis.filteredData = starredData;\n\t\t\t}else {\n\t\t\t\tthis.filteredData = [];\n\t\t\t}\n\t\t},\n\t\tupdateInputFocus(val = true) {\n\t\t\tif(val) {\n\t\t\t\tif(this.searchQuery == '') this.inputInit();\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.inputFocused = true;\n\t\t\t\t}, 100)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(this.insideSuggestions) return\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.inputFocused = false;\n\t\t\t\t}, 100)\n\t\t\t\tthis.escPressed();\n\t\t\t}\n\t\t},\n\t\tsuggestionSelected() {\n\t\t\tif(this.bodyOverlay && this.filteredData[0].url) this.$store.commit('TOGGLE_CONTENT_OVERLAY', false);\n\t\t\tif(this.filteredData.length) {\n\t\t\t\tif(this.filteredData[0].url){\n\t\t\t\t\tthis.searchQuery = '';\n\t\t\t\t\tif(this.currentSelected >= 0 ) this.$emit('selected', this.filteredData[this.currentSelected])\n\t\t\t\t\telse this.$emit('selected', this.filteredData[0])\n\t\t\t\t\tthis.filteredData = [];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tactionClicked() {\n\t\t\tthis.$emit('actionClicked', this.filteredData[this.currentSelected])\n\t\t\tif(!this.filteredData[this.currentSelected].highlightAction) this.filteredData.splice(this.currentSelected, 1)\n\t\t},\n\t\tincreaseIndex(val = false) {\n\t\t\tif(!val && this.currentSelected > 0) this.currentSelected--\n\t\t\telse if(val && (this.currentSelected < this.filteredData.length-1) && (this.filteredData[this.currentSelected+1].index > -1)) this.currentSelected++\n\t\t\tthis.fixScrolling();\n\t\t},\n\t\tfocusInput() {\n\t\t\tthis.$refs.input.$el.querySelector('input').focus();\n\t\t},\n\t\tfixScrolling() {\n\t\t\tif(this.currentSelected > 0) {\n\t\t\t\tconst liH = this.$refs.option[this.currentSelected].clientHeight;\n\t\t\t\tconst ulH = this.$refs.scrollContainer.clientHeight;\n\t\t\t\tif(ulH - (liH * this.currentSelected) < liH){\n\t\t\t\t\tthis.$refs.scrollContainer.scrollTop = Math.round(((this.currentSelected+1) - (ulH / liH)+1) * liH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tmounted() {\n\t\tif(this.autoFocus) this.focusInput();\n\t}\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuesax/components/vxAutoSuggest.scss\";\n</style>"]}]}