{"remainingRequest":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/revelation/VueJS/WnC_Apps/wc_admin/src/views/apps/chat/UserProfile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/src/views/apps/chat/UserProfile.vue","mtime":1557525828000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport contacts from './contacts.js'\r\n\r\nexport default{\r\n    props: {\r\n        userId: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        active: {\r\n            type: Boolean,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            contacts: contacts,\r\n            counterDanger: false,\r\n            settings: { // perfectscrollbar settings\r\n                maxScrollbarLength: 60,\r\n                wheelSpeed: .60,\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        isActiveUser() {\r\n            return this.contactIndex === -1;\r\n        },\r\n        activeLocal: {\r\n            get() {\r\n                return this.active\r\n            },\r\n            set(value) {\r\n                this.$emit('closeProfileSidebar', value);\r\n            }\r\n        },\r\n        about: {\r\n            get() {\r\n                if(this.contactIndex === -1) {\r\n                    return this.$store.state.AppActiveUser.about;\r\n                }else{\r\n                    return this.contacts[this.contactIndex].about;\r\n                }\r\n            },\r\n            set(value) {\r\n                if(value.length > 120) {\r\n                    value = value.substring(0, 120)\r\n                }\r\n                this.$store.dispatch('chat/updateAboutChat', value);\r\n            }\r\n        },\r\n        contactIndex() {\r\n            return contacts.findIndex(contact => contact.id == this.userId);\r\n        },\r\n        status: {\r\n            get() {\r\n                if(this.contactIndex === -1) {\r\n                    return this.$store.state.AppActiveUser.status;\r\n                }\r\n            },\r\n            set(value) {\r\n                if(this.contactIndex === -1) {\r\n                    this.$store.dispatch('chat/updateStatusChat', value);\r\n                }\r\n            }\r\n        },\r\n        userImg() {\r\n            if(this.contactIndex === -1) {\r\n                return this.$store.state.AppActiveUser.img;\r\n            }else{\r\n                return this.contacts[this.contactIndex].img;\r\n            }\r\n        },\r\n        userName() {\r\n            if(this.contactIndex === -1){\r\n                return this.$store.state.AppActiveUser.name;\r\n            }else{\r\n                return this.contacts[this.contactIndex].name;\r\n            }\r\n        },\r\n        getStatusColor() {\r\n            return (isActiveUser) => {\r\n                const userStatus = this.getUserStatus(isActiveUser)\r\n\r\n                if(userStatus == \"online\"){\r\n                    return \"success\"\r\n                }else if(userStatus == \"do not disturb\"){\r\n                    return \"danger\"\r\n                }else if(userStatus == \"away\"){\r\n                    return \"warning\"\r\n                }else{\r\n                    return \"grey\"               \r\n                }\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        getUserStatus(isActiveUser) {\r\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.contactIndex].status;\r\n        },\r\n    },\r\n    components:{\r\n        VuePerfectScrollbar,\r\n    }\r\n}\r\n",{"version":3,"sources":["UserProfile.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"UserProfile.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\r\n    File Name: UserProfile.vue\r\n    Description: user profile sidebar\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n<template>\r\n    <div id=\"parentx-demo-2\">\r\n\r\n        <vs-sidebar parent=\"#chat-app\" :position-right=\"!isActiveUser\" :hidden-background=\"false\" v-model=\"activeLocal\" id=\"chat-profile-sidebar\" class=\"items-no-padding\">\r\n\r\n            <div class=\"header-sidebar relative flex flex-col p-0\" slot=\"header\">\r\n                <feather-icon icon=\"XIcon\" svgClasses=\"m-2 cursor-pointer absolute pin-t pin-r\" @click=\"$emit('closeProfileSidebar', false)\"></feather-icon>\r\n\r\n\r\n                <div class=\"relative inline-flex mx-auto mb-5 mt-6\">\r\n                    <vs-avatar class=\"m-0\" :src=\"require(`@/assets/images/portrait/small/${userImg}`)\" size=\"70px\" />\r\n                    <div class=\"h-5 w-5 border-white border-2 border-solid rounded-full absolute pin-r pin-b\" :class=\"'bg-' + getStatusColor(isActiveUser)\"></div>\r\n                </div>\r\n                <h4 class=\"mr-2 self-center\">{{ userName }}</h4>\r\n            </div>\r\n\r\n            <VuePerfectScrollbar class=\"scroll-area\" :settings=\"settings\">\r\n            <div class=\"p-8\">\r\n\r\n                <h6 class=\"mb-2\" :class=\"{'ml-4': isActiveUser}\">About</h6>\r\n                <vs-textarea class=\"mb-10\" counter=\"120\" maxlength=\"120\" :counter-danger.sync=\"counterDanger\" v-model=\"about\" rows=\"5\" v-if=\"isActiveUser\" />\r\n                <p v-else>{{ about }}</p>\r\n\r\n                <div class=\"userProfile__status\" v-if=\"isActiveUser\">\r\n                    <h6 class=\"mb-4\">Status</h6>\r\n                    <ul>\r\n                        <li class=\"mb-2\">\r\n                            <vs-radio v-model=\"status\" vs-value=\"online\" color=\"success\">Active</vs-radio>\r\n                        </li>\r\n                        <li class=\"mb-2\">\r\n                            <vs-radio v-model=\"status\" vs-value=\"do not disturb\" color=\"danger\">Do Not Disturb</vs-radio>\r\n                        </li>\r\n                        <li class=\"mb-2\">\r\n                            <vs-radio v-model=\"status\" vs-value=\"away\" color=\"warning\">Away</vs-radio>\r\n                        </li>\r\n                        <li class=\"mb-2\">\r\n                            <vs-radio v-model=\"status\" vs-value=\"offline\" color=\"grey\">Offline</vs-radio>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            </VuePerfectScrollbar>\r\n        </vs-sidebar>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport contacts from './contacts.js'\r\n\r\nexport default{\r\n    props: {\r\n        userId: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        active: {\r\n            type: Boolean,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            contacts: contacts,\r\n            counterDanger: false,\r\n            settings: { // perfectscrollbar settings\r\n                maxScrollbarLength: 60,\r\n                wheelSpeed: .60,\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        isActiveUser() {\r\n            return this.contactIndex === -1;\r\n        },\r\n        activeLocal: {\r\n            get() {\r\n                return this.active\r\n            },\r\n            set(value) {\r\n                this.$emit('closeProfileSidebar', value);\r\n            }\r\n        },\r\n        about: {\r\n            get() {\r\n                if(this.contactIndex === -1) {\r\n                    return this.$store.state.AppActiveUser.about;\r\n                }else{\r\n                    return this.contacts[this.contactIndex].about;\r\n                }\r\n            },\r\n            set(value) {\r\n                if(value.length > 120) {\r\n                    value = value.substring(0, 120)\r\n                }\r\n                this.$store.dispatch('chat/updateAboutChat', value);\r\n            }\r\n        },\r\n        contactIndex() {\r\n            return contacts.findIndex(contact => contact.id == this.userId);\r\n        },\r\n        status: {\r\n            get() {\r\n                if(this.contactIndex === -1) {\r\n                    return this.$store.state.AppActiveUser.status;\r\n                }\r\n            },\r\n            set(value) {\r\n                if(this.contactIndex === -1) {\r\n                    this.$store.dispatch('chat/updateStatusChat', value);\r\n                }\r\n            }\r\n        },\r\n        userImg() {\r\n            if(this.contactIndex === -1) {\r\n                return this.$store.state.AppActiveUser.img;\r\n            }else{\r\n                return this.contacts[this.contactIndex].img;\r\n            }\r\n        },\r\n        userName() {\r\n            if(this.contactIndex === -1){\r\n                return this.$store.state.AppActiveUser.name;\r\n            }else{\r\n                return this.contacts[this.contactIndex].name;\r\n            }\r\n        },\r\n        getStatusColor() {\r\n            return (isActiveUser) => {\r\n                const userStatus = this.getUserStatus(isActiveUser)\r\n\r\n                if(userStatus == \"online\"){\r\n                    return \"success\"\r\n                }else if(userStatus == \"do not disturb\"){\r\n                    return \"danger\"\r\n                }else if(userStatus == \"away\"){\r\n                    return \"warning\"\r\n                }else{\r\n                    return \"grey\"               \r\n                }\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        getUserStatus(isActiveUser) {\r\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.contactIndex].status;\r\n        },\r\n    },\r\n    components:{\r\n        VuePerfectScrollbar,\r\n    }\r\n}\r\n</script>"]}]}