{"remainingRequest":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\views\\apps\\chat\\ChatLog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\views\\apps\\chat\\ChatLog.vue","mtime":1567769643010},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567769166513},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567769589298}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport contacts from './contacts'\n\nexport default{\n    props: {\n        userId: {\n            type: Number,\n            required: true,\n        }\n    },\n    data() {\n        return {\n            contacts: contacts,\n        }\n    },\n    computed: {\n        chatData() {\n            return this.$store.getters['chat/chatDataOfUser'](this.userId);\n        },\n        contactIndex() {\n            return contacts.findIndex(contact => contact.id == this.userId);\n        },\n        userImg() {\n            if(this.contactIndex !== -1) return this.contacts[this.contactIndex].img;\n        },\n        activeUserImg() {\n            return this.$store.state.AppActiveUser.img;\n        },\n        senderImg() {\n            return (isSentByActiveUser) => {\n                if (isSentByActiveUser) return require(`@/assets/images/portrait/small/${this.$store.state.AppActiveUser.img}`);\n                else return require(`@/assets/images/portrait/small/${this.contacts[this.contactIndex].img}`);\n            }\n        },\n        hasSentPreviousMsg() {\n            return (last_sender, current_sender) => last_sender == current_sender\n        },\n    },\n    methods: {\n        isSameDay(time_to, time_from) {\n            const date_time_to = new Date(Date.parse(time_to))\n            const date_time_from = new Date(Date.parse(time_from));\n            return date_time_to.getFullYear() === date_time_from.getFullYear() &&\n                date_time_to.getMonth() === date_time_from.getMonth() &&\n                date_time_to.getDate() === date_time_from.getDate();\n        },\n        toDate(time) {\n            const locale = \"en-us\";\n            const date_obj = new Date(Date.parse(time));\n            const monthName= date_obj.toLocaleString(locale, {\n                month: 'short'\n            });\n            return date_obj.getDate() + ' '  + monthName;\n        },\n        scrollToBottom() {\n            this.$nextTick(() => {\n                this.$parent.$el.scrollTop = this.$parent.$el.scrollHeight\n            });\n        }\n    },\n    updated() {\n        this.scrollToBottom();\n    },\n    mounted() {\n        this.scrollToBottom();\n    }\n}\n",{"version":3,"sources":["ChatLog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatLog.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\n    File Name: ChatLog.vue\n    Description: Chat Application - Log of chat\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n<!-- hasSentPreviousMsg -->\n<template>\n    <div id=\"component-chat-log\" class=\"m-8\" v-if=\"chatData\">\n        <div v-for=\"(msg, index) in chatData.msg\" class=\"msg-grp-container\" :key=\"index\">\n\n            <!-- If previouse msg is older than current time -->\n            <template v-if=\"chatData.msg[index-1]\">\n                <vs-divider v-if=\"!isSameDay(msg.time, chatData.msg[index-1].time)\">\n                    <span>{{ toDate(msg.time) }}</span>\n                </vs-divider>\n                <div class=\"spacer mt-8\" v-if=\"!hasSentPreviousMsg(chatData.msg[index-1].isSent, msg.isSent)\"></div>\n            </template>\n\n            <div class=\"flex items-start\" :class=\"[{'flex-row-reverse' : msg.isSent}]\">\n\n                <template v-if=\"chatData.msg[index-1]\">\n                    <template v-if=\"(!hasSentPreviousMsg(chatData.msg[index-1].isSent, msg.isSent) || !isSameDay(msg.time, chatData.msg[index-1].time))\">\n                        <vs-avatar size=\"40px\" class=\"m-0 flex-no-shrink\" :class=\"msg.isSent ? 'sm:ml-5 ml-3' : 'sm:mr-5 mr-3'\" :src=\"senderImg(msg.isSent)\"></vs-avatar>\n                    </template>\n                </template>\n\n                <template v-if=\"index == 0\">\n                    <vs-avatar size=\"40px\" class=\"m-0 flex-no-shrink\" :class=\"msg.isSent ? 'sm:ml-5 ml-3' : 'sm:mr-5 mr-3'\" :src=\"senderImg(msg.isSent)\"></vs-avatar>\n                </template>\n\n                <template v-if=\"chatData.msg[index-1]\">\n                    <div class=\"mr-16\" v-if=\"!(!hasSentPreviousMsg(chatData.msg[index-1].isSent, msg.isSent) || !isSameDay(msg.time, chatData.msg[index-1].time))\"></div>\n                </template>\n\n                <div class=\"msg break-words relative shadow-md rounded py-3 px-4 mb-2 rounded-lg max-w-sm\" :class=\"{'bg-primary-gradient text-white': msg.isSent, 'border border-solid border-grey-light bg-white': !msg.isSent}\">\n                    <span>{{ msg.textContent }}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport contacts from './contacts'\n\nexport default{\n    props: {\n        userId: {\n            type: Number,\n            required: true,\n        }\n    },\n    data() {\n        return {\n            contacts: contacts,\n        }\n    },\n    computed: {\n        chatData() {\n            return this.$store.getters['chat/chatDataOfUser'](this.userId);\n        },\n        contactIndex() {\n            return contacts.findIndex(contact => contact.id == this.userId);\n        },\n        userImg() {\n            if(this.contactIndex !== -1) return this.contacts[this.contactIndex].img;\n        },\n        activeUserImg() {\n            return this.$store.state.AppActiveUser.img;\n        },\n        senderImg() {\n            return (isSentByActiveUser) => {\n                if (isSentByActiveUser) return require(`@/assets/images/portrait/small/${this.$store.state.AppActiveUser.img}`);\n                else return require(`@/assets/images/portrait/small/${this.contacts[this.contactIndex].img}`);\n            }\n        },\n        hasSentPreviousMsg() {\n            return (last_sender, current_sender) => last_sender == current_sender\n        },\n    },\n    methods: {\n        isSameDay(time_to, time_from) {\n            const date_time_to = new Date(Date.parse(time_to))\n            const date_time_from = new Date(Date.parse(time_from));\n            return date_time_to.getFullYear() === date_time_from.getFullYear() &&\n                date_time_to.getMonth() === date_time_from.getMonth() &&\n                date_time_to.getDate() === date_time_from.getDate();\n        },\n        toDate(time) {\n            const locale = \"en-us\";\n            const date_obj = new Date(Date.parse(time));\n            const monthName= date_obj.toLocaleString(locale, {\n                month: 'short'\n            });\n            return date_obj.getDate() + ' '  + monthName;\n        },\n        scrollToBottom() {\n            this.$nextTick(() => {\n                this.$parent.$el.scrollTop = this.$parent.$el.scrollHeight\n            });\n        }\n    },\n    updated() {\n        this.scrollToBottom();\n    },\n    mounted() {\n        this.scrollToBottom();\n    }\n}\n</script>\n"]}]}