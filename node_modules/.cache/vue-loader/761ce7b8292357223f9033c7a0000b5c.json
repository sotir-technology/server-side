{"remainingRequest":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\layouts\\churcha2z\\components\\vx-sidebar\\VxSidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\layouts\\churcha2z\\components\\vx-sidebar\\VxSidebar.vue","mtime":1567769939387},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567769166513},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567769589298}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport VxSidebarGroup from './VxSidebarGroup.vue';\nimport VxSidebarItem  from './VxSidebarItem.vue';\n\nexport default {\n    name: 'vx-sidebar',\n    props: {\n        sidebarItems: {\n            type: Array,\n            required: true,\n        },\n        title: {\n            type: String,\n        },\n        logo: {\n            type: String\n        },\n        parent: {\n            type: String\n        },\n        openGroupHover: {\n            type: Boolean,\n            default: false\n        },\n        reduceNotRebound: {\n            type: Boolean,\n            default: true,\n        }\n    },\n    data: () => ({\n        clickNotClose: false, // disable close sidebar on outside click\n        reduce: false, // determines if sidebar is reduce - component property\n        showCloseButton: false, // show close button in smaller devices\n        isMouseEnter: false,\n        settings: { // perfectscrollbar settings\n            maxScrollbarLength: 60,\n            wheelSpeed: 1,\n            swipeEasing: true\n        },\n        windowWidth: window.innerWidth, //width of windows\n        showShadowBottom: false,\n    }),\n    computed: {\n        isSidebarActive: {\n            get() {\n                return this.$store.state.isSidebarActive\n            },\n            set(val) {\n              this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', val)\n            }\n        },\n        reduceSidebar() {\n            return Boolean(this.reduce && this.reduceButton)\n        },\n        reduceButton: {\n            get() {\n                return this.$store.state.reduceButton;\n            },\n            set(val) {\n                this.$store.commit('TOGGLE_REDUCE_BUTTON', val)\n            }\n        },\n        sidebarItemsMin() {\n            return this.$store.state.sidebarItemsMin;\n        },\n        isGroupActive() {\n            return (sidebarItem) => {\n                const path = this.$route.fullPath;\n                let open = false;\n                let func = function(sidebarItem) {\n                    if (sidebarItem.submenu) {\n                        sidebarItem.submenu.forEach((item) => {\n                            if (path == item.url) { open = true }\n                            else if (item.submenu) { func(item) }\n                        })\n                    }\n                }\n                func(sidebarItem)\n                return open\n            }\n        },\n    },\n    watch: {\n        reduce(val) {\n\n            if (val == true) {\n                this.$store.dispatch('updateSidebarWidth', 'reduced');\n\n            } else {\n                this.$store.dispatch('updateSidebarWidth', 'default');\n            }\n\n            setTimeout(function(){\n                window.dispatchEvent(new Event('resize'));\n            }, 100);\n        },\n        reduceButton() {\n            this.setSidebarWidth();\n        },\n        '$route'() {\n            if(this.isSidebarActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false);\n        },\n    },\n    methods: {\n        sidebarMouseEntered() {\n            if (this.reduce) this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\n            this.isMouseEnter = true;\n        },\n        sidebarMouseLeave() {\n            if (this.reduce) {\n                this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', true);\n            }\n            this.isMouseEnter = false;\n        },\n        toggleReduce(val) {\n            this.reduceButton = val;\n            this.setSidebarWidth();\n        },\n        handleWindowResize(event) {\n            this.windowWidth = event.currentTarget.innerWidth;\n            this.setSidebarWidth();\n        },\n        setSidebarWidth() {\n            if (this.windowWidth < 1200) {\n                if(this.windowWidth < 992) this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'md')\n                else this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'lg')\n\n                this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false)\n                if (this.reduceButton) this.reduce = false;\n                // this.reduceButton = false;\n                this.showCloseButton = true;\n                this.clickNotClose = false;\n                this.$store.dispatch('updateSidebarWidth', 'no-sidebar')\n                this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\n            }\n            else {\n                this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'xl')\n                if (this.reduceButton) this.reduce = true;\n                else this.reduce = false;\n\n                this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', true)\n                if (this.reduceButton && !this.isMouseEnter) this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', true)\n                else this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\n\n                this.clickNotClose = true;\n                this.showCloseButton = false;\n                if (this.reduceSidebar)\n                    this.$store.dispatch('updateSidebarWidth', 'reduced')\n                else\n                    this.$store.dispatch('updateSidebarWidth', 'default')\n            }\n        },\n        psSectionScroll() {\n            if(this.$refs.mainSidebarPs.$el.scrollTop > 0) this.showShadowBottom = true;\n            else this.showShadowBottom = false;\n        },\n    },\n    components: {\n        VxSidebarGroup,\n        VxSidebarItem,\n        VuePerfectScrollbar,\n    },\n    mounted() {\n        this.$nextTick(() => {\n            window.addEventListener('resize', this.handleWindowResize);\n        });\n        this.setSidebarWidth();\n    },\n    beforeDestroy() {\n        window.removeEventListener('resize', this.handleWindowResize);\n    },\n}\n",{"version":3,"sources":["VxSidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VxSidebar.vue","sourceRoot":"src/layouts/churcha2z/components/vx-sidebar","sourcesContent":["<!-- =========================================================================================\n    File Name: VxSidebar.vue\n    Description: Sidebar Component\n    Component Name: VxSidebar\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n    <div class=\"parentx\">\n        <vs-sidebar ref=\"mainSidebar\" :parent=\"parent\" :hiddenBackground=\"clickNotClose\" :reduce=\"reduce\" default-index=\"-1\" class=\"sidebarx main-menu-sidebar items-no-padding\" v-model=\"isSidebarActive\" :click-not-close=\"clickNotClose\" :reduce-not-rebound=\"reduceNotRebound\">\n            <div @mouseenter=\"sidebarMouseEntered\" @mouseleave=\"sidebarMouseLeave\">\n                <div class=\"header-sidebar flex items-end justify-between\" slot=\"header\">\n                    <div class=\"logo flex items-center\">\n                        <img :src=\"logo\" alt=\"logo\" class=\"w-10 mr-4\" v-if=\"logo\">\n                        <span class=\"logo-text\" v-show=\"isMouseEnter || !reduce\" v-if=\"title\">{{ title }}</span>\n                    </div>\n                    <div>\n                        <template v-if=\"showCloseButton\">\n                            <feather-icon icon=\"XIcon\" class=\"m-0 cursor-pointer\" @click=\"$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false)\"></feather-icon>\n                        </template>\n                        <template v-else-if=\"!showCloseButton && !sidebarItemsMin\">\n                            <feather-icon icon=\"DiscIcon\" class=\"mr-0 cursor-pointer\" svg-classes=\"stroke-current\" v-show=\"!reduce\" @click=\"toggleReduce(true)\" id=\"btnSidebarToggler\"></feather-icon>\n                            <feather-icon icon=\"CircleIcon\" class=\"mr-0 cursor-pointer\" svg-classes=\"stroke-current\" v-show=\"reduce\" @click=\"toggleReduce(false)\" id=\"btnSidebarToggler\"></feather-icon>\n                        </template>\n                    </div>\n                </div>\n\n                <div class=\"shadow-bottom\" v-show=\"showShadowBottom\"></div>\n\n                <VuePerfectScrollbar ref=\"mainSidebarPs\" class=\"scroll-area--main-sidebar pt-2\" :settings=\"settings\" @ps-scroll-y=\"psSectionScroll\">\n                    <template v-for=\"(sidebarItem, index) in sidebarItems\">\n\n                        <!-- GROUP ITEM HEADER -->\n                        <span :key=\"`header-${index}`\" v-if=\"sidebarItem.header && !sidebarItemsMin\" class=\"navigation-header truncate\">{{ $t(sidebarItem.i18n) || sidebarItem.header }}</span>\n                        <template v-else-if=\"!sidebarItem.header\">\n\n                            <!-- IF IT'S SINGLE ITEM -->\n                            <vx-sidebar-item ref=\"sidebarLink\" :key=\"`sidebarItem-${index}`\" v-if=\"!sidebarItem.submenu\" :index=\"index\" :to=\"sidebarItem.slug != 'external' ? sidebarItem.url : ''\" :href=\"sidebarItem.slug == 'external' ? sidebarItem.url : ''\" :icon=\"sidebarItem.icon\" :target=\"sidebarItem.target\" :isDisabled=\"sidebarItem.isDisabled\">\n                                <span v-show=\"!sidebarItemsMin\" class=\"truncate\">{{ $t(sidebarItem.i18n) || sidebarItem.name }}</span>\n                                <vs-chip class=\"ml-auto\" :color=\"sidebarItem.tagColor\" v-if=\"sidebarItem.tag && (isMouseEnter || !reduce)\">{{ sidebarItem.tag }}</vs-chip>\n                            </vx-sidebar-item>\n\n                            <!-- IF HAVE SUBMENU / DROPDOWN -->\n                            <template v-else>\n                                <vx-sidebar-group ref=\"sidebarGrp\" :key=\"`group-${index}`\" :openHover=\"openGroupHover\" :group=\"sidebarItem\" :groupIndex=\"index\" :open=\"isGroupActive(sidebarItem)\"></vx-sidebar-group>\n                            </template>\n                        </template>\n                    </template>\n                </VuePerfectScrollbar>\n            </div>\n        </vs-sidebar>\n    </div>\n</template>\n\n<script>\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport VxSidebarGroup from './VxSidebarGroup.vue';\nimport VxSidebarItem  from './VxSidebarItem.vue';\n\nexport default {\n    name: 'vx-sidebar',\n    props: {\n        sidebarItems: {\n            type: Array,\n            required: true,\n        },\n        title: {\n            type: String,\n        },\n        logo: {\n            type: String\n        },\n        parent: {\n            type: String\n        },\n        openGroupHover: {\n            type: Boolean,\n            default: false\n        },\n        reduceNotRebound: {\n            type: Boolean,\n            default: true,\n        }\n    },\n    data: () => ({\n        clickNotClose: false, // disable close sidebar on outside click\n        reduce: false, // determines if sidebar is reduce - component property\n        showCloseButton: false, // show close button in smaller devices\n        isMouseEnter: false,\n        settings: { // perfectscrollbar settings\n            maxScrollbarLength: 60,\n            wheelSpeed: 1,\n            swipeEasing: true\n        },\n        windowWidth: window.innerWidth, //width of windows\n        showShadowBottom: false,\n    }),\n    computed: {\n        isSidebarActive: {\n            get() {\n                return this.$store.state.isSidebarActive\n            },\n            set(val) {\n              this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', val)\n            }\n        },\n        reduceSidebar() {\n            return Boolean(this.reduce && this.reduceButton)\n        },\n        reduceButton: {\n            get() {\n                return this.$store.state.reduceButton;\n            },\n            set(val) {\n                this.$store.commit('TOGGLE_REDUCE_BUTTON', val)\n            }\n        },\n        sidebarItemsMin() {\n            return this.$store.state.sidebarItemsMin;\n        },\n        isGroupActive() {\n            return (sidebarItem) => {\n                const path = this.$route.fullPath;\n                let open = false;\n                let func = function(sidebarItem) {\n                    if (sidebarItem.submenu) {\n                        sidebarItem.submenu.forEach((item) => {\n                            if (path == item.url) { open = true }\n                            else if (item.submenu) { func(item) }\n                        })\n                    }\n                }\n                func(sidebarItem)\n                return open\n            }\n        },\n    },\n    watch: {\n        reduce(val) {\n\n            if (val == true) {\n                this.$store.dispatch('updateSidebarWidth', 'reduced');\n\n            } else {\n                this.$store.dispatch('updateSidebarWidth', 'default');\n            }\n\n            setTimeout(function(){\n                window.dispatchEvent(new Event('resize'));\n            }, 100);\n        },\n        reduceButton() {\n            this.setSidebarWidth();\n        },\n        '$route'() {\n            if(this.isSidebarActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false);\n        },\n    },\n    methods: {\n        sidebarMouseEntered() {\n            if (this.reduce) this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\n            this.isMouseEnter = true;\n        },\n        sidebarMouseLeave() {\n            if (this.reduce) {\n                this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', true);\n            }\n            this.isMouseEnter = false;\n        },\n        toggleReduce(val) {\n            this.reduceButton = val;\n            this.setSidebarWidth();\n        },\n        handleWindowResize(event) {\n            this.windowWidth = event.currentTarget.innerWidth;\n            this.setSidebarWidth();\n        },\n        setSidebarWidth() {\n            if (this.windowWidth < 1200) {\n                if(this.windowWidth < 992) this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'md')\n                else this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'lg')\n\n                this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false)\n                if (this.reduceButton) this.reduce = false;\n                // this.reduceButton = false;\n                this.showCloseButton = true;\n                this.clickNotClose = false;\n                this.$store.dispatch('updateSidebarWidth', 'no-sidebar')\n                this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\n            }\n            else {\n                this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'xl')\n                if (this.reduceButton) this.reduce = true;\n                else this.reduce = false;\n\n                this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', true)\n                if (this.reduceButton && !this.isMouseEnter) this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', true)\n                else this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\n\n                this.clickNotClose = true;\n                this.showCloseButton = false;\n                if (this.reduceSidebar)\n                    this.$store.dispatch('updateSidebarWidth', 'reduced')\n                else\n                    this.$store.dispatch('updateSidebarWidth', 'default')\n            }\n        },\n        psSectionScroll() {\n            if(this.$refs.mainSidebarPs.$el.scrollTop > 0) this.showShadowBottom = true;\n            else this.showShadowBottom = false;\n        },\n    },\n    components: {\n        VxSidebarGroup,\n        VxSidebarItem,\n        VuePerfectScrollbar,\n    },\n    mounted() {\n        this.$nextTick(() => {\n            window.addEventListener('resize', this.handleWindowResize);\n        });\n        this.setSidebarWidth();\n    },\n    beforeDestroy() {\n        window.removeEventListener('resize', this.handleWindowResize);\n    },\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuesax/components/vxSidebar.scss\"\n</style>\n"]}]}