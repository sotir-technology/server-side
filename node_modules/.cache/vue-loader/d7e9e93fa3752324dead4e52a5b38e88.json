{"remainingRequest":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\chat\\ChatNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\chat\\ChatNavbar.vue","mtime":1567376724796},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567428497170},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567428476521},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567428497170},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567428708565}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport contacts from './contacts'\r\n\r\nexport default{\r\n    props: {\r\n        userId: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        isPinnedProp: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        isSidebarCollapsed: {\r\n            type: Boolean,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            contacts: contacts,\r\n            isPinnedLocal: this.isPinnedProp,\r\n        }\r\n    },\r\n    watch: {\r\n        isPinnedProp(val) {\r\n            this.isPinnedLocal = val;\r\n        }\r\n    },\r\n    computed: {\r\n        contactIndex() {\r\n            return contacts.findIndex(contact => contact.id == this.userId);\r\n        },\r\n        userImg() {\r\n            if(this.contactIndex === -1) {\r\n                return this.$store.state.AppActiveUser.img;\r\n            }else{\r\n                return this.contacts[this.contactIndex].img;\r\n            }\r\n        },\r\n        contactName() {\r\n            if(this.contactIndex === -1) {\r\n                return this.$store.state.AppActiveUser.name;\r\n            }else{\r\n                return this.contacts[this.contactIndex].name;\r\n            }\r\n        },\r\n        getStatusColor() {\r\n            return (isActiveUser) => {\r\n                const userStatus = this.getUserStatus(isActiveUser);\r\n\r\n                if(userStatus == \"online\"){\r\n                    return \"success\"\r\n                }else if(userStatus == \"do not disturb\"){\r\n                    return \"danger\"\r\n                }else if(userStatus == \"away\"){\r\n                    return \"warning\"\r\n                }else{\r\n                    return \"grey\"               \r\n                }\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        getUserStatus(isActiveUser) {\r\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.contactIndex].status;\r\n        },\r\n        toggleIsPinned() {\r\n            const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId);\r\n            if(chatData) {\r\n                const payload = {id: this.userId, value: !this.isPinnedLocal};\r\n                this.$store.dispatch('chat/toggleIsPinned', payload)\r\n            }else{\r\n                this.$emit('toggleIsChatPinned', !this.isPinnedLocal)\r\n            }\r\n            this.isPinnedLocal = !this.isPinnedLocal\r\n        }\r\n    },\r\n}\r\n",{"version":3,"sources":["ChatNavbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatNavbar.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\r\n    File Name: ChatNavbar.vue\r\n    Description: Chat Application - Chat navbar\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n<template>\r\n    <div v-if=\"userId != null\" class=\"chat__header\">\r\n        <vs-navbar class=\"p-4 flex navbar-custom\" color=\"white\" type=\"flat\">\r\n            <div class=\"relative flex mr-4\">\r\n                <feather-icon icon=\"MenuIcon\" class=\"mr-4 cursor-pointer\" v-if=\"isSidebarCollapsed\" @click.stop=\"$emit('openContactsSidebar')\"></feather-icon>\r\n                <vs-avatar class=\"m-0\" size=\"40px\" :src=\"require(`@/assets/images/portrait/small/${userImg}`)\" @click.stop=\"$emit('showProfileSidebar', userId)\" />\r\n                <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute pin-r pin-b\" :class=\"'bg-' + getStatusColor(false)\"></div>\r\n            </div>\r\n            <h6>{{ contactName }}</h6>\r\n            <vs-spacer></vs-spacer>\r\n            <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isPinnedLocal}, 'w-6', 'h-6']\" @click.stop=\"toggleIsPinned\"></feather-icon>\r\n        </vs-navbar>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport contacts from './contacts'\r\n\r\nexport default{\r\n    props: {\r\n        userId: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        isPinnedProp: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        isSidebarCollapsed: {\r\n            type: Boolean,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            contacts: contacts,\r\n            isPinnedLocal: this.isPinnedProp,\r\n        }\r\n    },\r\n    watch: {\r\n        isPinnedProp(val) {\r\n            this.isPinnedLocal = val;\r\n        }\r\n    },\r\n    computed: {\r\n        contactIndex() {\r\n            return contacts.findIndex(contact => contact.id == this.userId);\r\n        },\r\n        userImg() {\r\n            if(this.contactIndex === -1) {\r\n                return this.$store.state.AppActiveUser.img;\r\n            }else{\r\n                return this.contacts[this.contactIndex].img;\r\n            }\r\n        },\r\n        contactName() {\r\n            if(this.contactIndex === -1) {\r\n                return this.$store.state.AppActiveUser.name;\r\n            }else{\r\n                return this.contacts[this.contactIndex].name;\r\n            }\r\n        },\r\n        getStatusColor() {\r\n            return (isActiveUser) => {\r\n                const userStatus = this.getUserStatus(isActiveUser);\r\n\r\n                if(userStatus == \"online\"){\r\n                    return \"success\"\r\n                }else if(userStatus == \"do not disturb\"){\r\n                    return \"danger\"\r\n                }else if(userStatus == \"away\"){\r\n                    return \"warning\"\r\n                }else{\r\n                    return \"grey\"               \r\n                }\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        getUserStatus(isActiveUser) {\r\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.contactIndex].status;\r\n        },\r\n        toggleIsPinned() {\r\n            const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId);\r\n            if(chatData) {\r\n                const payload = {id: this.userId, value: !this.isPinnedLocal};\r\n                this.$store.dispatch('chat/toggleIsPinned', payload)\r\n            }else{\r\n                this.$emit('toggleIsChatPinned', !this.isPinnedLocal)\r\n            }\r\n            this.isPinnedLocal = !this.isPinnedLocal\r\n        }\r\n    },\r\n}\r\n</script>"]}]}