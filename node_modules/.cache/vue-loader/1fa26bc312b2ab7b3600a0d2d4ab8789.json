{"remainingRequest":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\todo\\TodoItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\todo\\TodoItem.vue","mtime":1567376724918},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567428497170},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567428476521},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567428497170},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567428708565}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default{\r\n    props: {\r\n        todoItemId: {\r\n            type: Number,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n        }\r\n    },\r\n    computed: {\r\n        isImportant: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isImportant;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/toggleIsImportant', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n        isStarred: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isStarred;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/toggleIsStarred', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n        isTrashed: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isTrashed;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/moveToTrash', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n        title() {\r\n            return this.$store.state.todo.todoArray[this.todoItemId].title;\r\n        },\r\n        desc() {\r\n            return this.$store.state.todo.todoArray[this.todoItemId].desc;\r\n        },\r\n        tags() {\r\n            return this.$store.state.todo.todoArray[this.todoItemId].tags;\r\n        },\r\n        isDone: {\r\n            get () {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isDone;\r\n            },\r\n            set (value) {\r\n                var payload = { id: this.todoItemId, value: value}\r\n                this.$store.dispatch('todo/toggleIsDone', payload)\r\n            }\r\n        },\r\n        todoLabelColor() {\r\n            return (label) => {\r\n                const tags = this.$store.state.todo.todoTags;\r\n                return tags.find((tag) => {\r\n                    return tag.value == label\r\n                }).color\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        toggleIsImportant() {\r\n            this.isImportant = !this.isImportant;\r\n        },\r\n        toggleIsStarred() {\r\n            this.isStarred = !this.isStarred;\r\n        },\r\n        moveToTrash() {\r\n            this.isTrashed = !this.isTrashed;\r\n        },\r\n        editTodo() {\r\n            alert();\r\n        },\r\n        displayPrompt() {\r\n            this.$emit('showDisplayPrompt', this.todoItemId);\r\n        }\r\n    },\r\n}\r\n",{"version":3,"sources":["TodoItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TodoItem.vue","sourceRoot":"src/views/apps/todo","sourcesContent":["<!-- =========================================================================================\r\n    File Name: TodoItem.vue\r\n    Description: Single todo item component\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <div @click=\"displayPrompt\" class=\"px-8 py-4 list-item-component\">\r\n        <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full sm:w-5/6 flex sm:items-center sm:flex-row flex-col\">\r\n                <div class=\"flex items-center\">\r\n                    <vs-checkbox v-model=\"isDone\" class=\"w-8 m-0 vs-checkbox-small\" @click.stop></vs-checkbox>\r\n                    <h6 class=\"todo-title\" :class=\"{'line-through': isDone}\">{{ title }}</h6>\r\n                </div>\r\n                <div class=\"todo-tags sm:ml-2 sm:my-0 my-2 flex\">\r\n                    <vs-chip v-for=\"(tag, index) in tags\" :key=\"index\">\r\n                        <div class=\"h-2 w-2 rounded-full mr-1\" :class=\"'bg-' + todoLabelColor(tag)\"></div>\r\n                        <span>{{ tag | capitalize }}</span>\r\n                    </vs-chip>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"vx-col w-full sm:w-1/6 ml-auto flex sm:justify-end\">\r\n                <feather-icon icon=\"InfoIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-success stroke-current': isImportant}, 'w-5', 'h-5 mr-4']\" @click.stop=\"toggleIsImportant\"></feather-icon>\r\n                <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isStarred}, 'w-5', 'h-5 mr-4']\" @click.stop=\"toggleIsStarred\"></feather-icon>\r\n                <feather-icon icon=\"TrashIcon\" class=\"cursor-pointer\" svgClasses=\"w-5 h-5 mr-4\" @click.stop=\"moveToTrash\" v-if=\"!isTrashed\"></feather-icon>\r\n            </div>\r\n        </div>\r\n        <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full\">\r\n                <p class=\"mt-2 truncate\" :class=\"{'line-through': isDone}\">{{ desc }}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default{\r\n    props: {\r\n        todoItemId: {\r\n            type: Number,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n        }\r\n    },\r\n    computed: {\r\n        isImportant: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isImportant;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/toggleIsImportant', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n        isStarred: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isStarred;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/toggleIsStarred', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n        isTrashed: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isTrashed;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/moveToTrash', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n        title() {\r\n            return this.$store.state.todo.todoArray[this.todoItemId].title;\r\n        },\r\n        desc() {\r\n            return this.$store.state.todo.todoArray[this.todoItemId].desc;\r\n        },\r\n        tags() {\r\n            return this.$store.state.todo.todoArray[this.todoItemId].tags;\r\n        },\r\n        isDone: {\r\n            get () {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isDone;\r\n            },\r\n            set (value) {\r\n                var payload = { id: this.todoItemId, value: value}\r\n                this.$store.dispatch('todo/toggleIsDone', payload)\r\n            }\r\n        },\r\n        todoLabelColor() {\r\n            return (label) => {\r\n                const tags = this.$store.state.todo.todoTags;\r\n                return tags.find((tag) => {\r\n                    return tag.value == label\r\n                }).color\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        toggleIsImportant() {\r\n            this.isImportant = !this.isImportant;\r\n        },\r\n        toggleIsStarred() {\r\n            this.isStarred = !this.isStarred;\r\n        },\r\n        moveToTrash() {\r\n            this.isTrashed = !this.isTrashed;\r\n        },\r\n        editTodo() {\r\n            alert();\r\n        },\r\n        displayPrompt() {\r\n            this.$emit('showDisplayPrompt', this.todoItemId);\r\n        }\r\n    },\r\n}\r\n</script>"]}]}