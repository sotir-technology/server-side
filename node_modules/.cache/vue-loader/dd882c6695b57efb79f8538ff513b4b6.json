{"remainingRequest":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\views\\apps\\chat\\ChatNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\views\\apps\\chat\\ChatNavbar.vue","mtime":1567769643011},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567769166513},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567769589298}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport contacts from './contacts'\n\nexport default{\n    props: {\n        userId: {\n            type: Number,\n            required: true,\n        },\n        isPinnedProp: {\n            type: Boolean,\n            required: true,\n        },\n        isSidebarCollapsed: {\n            type: Boolean,\n            required: true,\n        }\n    },\n    data() {\n        return {\n            contacts: contacts,\n            isPinnedLocal: this.isPinnedProp,\n        }\n    },\n    watch: {\n        isPinnedProp(val) {\n            this.isPinnedLocal = val;\n        }\n    },\n    computed: {\n        contactIndex() {\n            return contacts.findIndex(contact => contact.id == this.userId);\n        },\n        userImg() {\n            if(this.contactIndex === -1) {\n                return this.$store.state.AppActiveUser.img;\n            }else{\n                return this.contacts[this.contactIndex].img;\n            }\n        },\n        contactName() {\n            if(this.contactIndex === -1) {\n                return this.$store.state.AppActiveUser.name;\n            }else{\n                return this.contacts[this.contactIndex].name;\n            }\n        },\n        getStatusColor() {\n            return (isActiveUser) => {\n                const userStatus = this.getUserStatus(isActiveUser);\n\n                if(userStatus == \"online\"){\n                    return \"success\"\n                }else if(userStatus == \"do not disturb\"){\n                    return \"danger\"\n                }else if(userStatus == \"away\"){\n                    return \"warning\"\n                }else{\n                    return \"grey\"               \n                }\n            }\n        },\n    },\n    methods: {\n        getUserStatus(isActiveUser) {\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.contactIndex].status;\n        },\n        toggleIsPinned() {\n            const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId);\n            if(chatData) {\n                const payload = {id: this.userId, value: !this.isPinnedLocal};\n                this.$store.dispatch('chat/toggleIsPinned', payload)\n            }else{\n                this.$emit('toggleIsChatPinned', !this.isPinnedLocal)\n            }\n            this.isPinnedLocal = !this.isPinnedLocal\n        }\n    },\n}\n",{"version":3,"sources":["ChatNavbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatNavbar.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\n    File Name: ChatNavbar.vue\n    Description: Chat Application - Chat navbar\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n    <div v-if=\"userId != null\" class=\"chat__header\">\n        <vs-navbar class=\"p-4 flex navbar-custom\" color=\"white\" type=\"flat\">\n            <div class=\"relative flex mr-4\">\n                <feather-icon icon=\"MenuIcon\" class=\"mr-4 cursor-pointer\" v-if=\"isSidebarCollapsed\" @click.stop=\"$emit('openContactsSidebar')\"></feather-icon>\n                <vs-avatar class=\"m-0\" size=\"40px\" :src=\"require(`@/assets/images/portrait/small/${userImg}`)\" @click.stop=\"$emit('showProfileSidebar', userId)\" />\n                <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute pin-r pin-b\" :class=\"'bg-' + getStatusColor(false)\"></div>\n            </div>\n            <h6>{{ contactName }}</h6>\n            <vs-spacer></vs-spacer>\n            <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isPinnedLocal}, 'w-6', 'h-6']\" @click.stop=\"toggleIsPinned\"></feather-icon>\n        </vs-navbar>\n    </div>\n</template>\n\n<script>\nimport contacts from './contacts'\n\nexport default{\n    props: {\n        userId: {\n            type: Number,\n            required: true,\n        },\n        isPinnedProp: {\n            type: Boolean,\n            required: true,\n        },\n        isSidebarCollapsed: {\n            type: Boolean,\n            required: true,\n        }\n    },\n    data() {\n        return {\n            contacts: contacts,\n            isPinnedLocal: this.isPinnedProp,\n        }\n    },\n    watch: {\n        isPinnedProp(val) {\n            this.isPinnedLocal = val;\n        }\n    },\n    computed: {\n        contactIndex() {\n            return contacts.findIndex(contact => contact.id == this.userId);\n        },\n        userImg() {\n            if(this.contactIndex === -1) {\n                return this.$store.state.AppActiveUser.img;\n            }else{\n                return this.contacts[this.contactIndex].img;\n            }\n        },\n        contactName() {\n            if(this.contactIndex === -1) {\n                return this.$store.state.AppActiveUser.name;\n            }else{\n                return this.contacts[this.contactIndex].name;\n            }\n        },\n        getStatusColor() {\n            return (isActiveUser) => {\n                const userStatus = this.getUserStatus(isActiveUser);\n\n                if(userStatus == \"online\"){\n                    return \"success\"\n                }else if(userStatus == \"do not disturb\"){\n                    return \"danger\"\n                }else if(userStatus == \"away\"){\n                    return \"warning\"\n                }else{\n                    return \"grey\"               \n                }\n            }\n        },\n    },\n    methods: {\n        getUserStatus(isActiveUser) {\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.contactIndex].status;\n        },\n        toggleIsPinned() {\n            const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId);\n            if(chatData) {\n                const payload = {id: this.userId, value: !this.isPinnedLocal};\n                this.$store.dispatch('chat/toggleIsPinned', payload)\n            }else{\n                this.$emit('toggleIsChatPinned', !this.isPinnedLocal)\n            }\n            this.isPinnedLocal = !this.isPinnedLocal\n        }\n    },\n}\n</script>"]}]}