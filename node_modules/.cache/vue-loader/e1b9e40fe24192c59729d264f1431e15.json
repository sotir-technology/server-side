{"remainingRequest":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\views\\churcha2z\\apps\\todo\\TodoItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\src\\views\\churcha2z\\apps\\todo\\TodoItem.vue","mtime":1567769939464},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1567769166513},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1567769201670},{"path":"C:\\Users\\Message Akunna\\Documents\\workspace\\vuejs\\sotire technology\\new\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":1567769589298}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default{\n    props: {\n        todoItemId: {\n            type: Number,\n            required: true,\n        }\n    },\n    data() {\n        return {\n        }\n    },\n    computed: {\n        isImportant: {\n            get() {\n                return this.$store.state.todo.todoArray[this.todoItemId].isImportant;\n            },\n            set(value) {\n                this.$store.dispatch('todo/toggleIsImportant', { id: this.todoItemId, value: value})\n            }\n        },\n        isStarred: {\n            get() {\n                return this.$store.state.todo.todoArray[this.todoItemId].isStarred;\n            },\n            set(value) {\n                this.$store.dispatch('todo/toggleIsStarred', { id: this.todoItemId, value: value})\n            }\n        },\n        isTrashed: {\n            get() {\n                return this.$store.state.todo.todoArray[this.todoItemId].isTrashed;\n            },\n            set(value) {\n                this.$store.dispatch('todo/moveToTrash', { id: this.todoItemId, value: value})\n            }\n        },\n        title() {\n            return this.$store.state.todo.todoArray[this.todoItemId].title;\n        },\n        desc() {\n            return this.$store.state.todo.todoArray[this.todoItemId].desc;\n        },\n        tags() {\n            return this.$store.state.todo.todoArray[this.todoItemId].tags;\n        },\n        isDone: {\n            get () {\n                return this.$store.state.todo.todoArray[this.todoItemId].isDone;\n            },\n            set (value) {\n                var payload = { id: this.todoItemId, value: value}\n                this.$store.dispatch('todo/toggleIsDone', payload)\n            }\n        },\n        todoLabelColor() {\n            return (label) => {\n                const tags = this.$store.state.todo.todoTags;\n                return tags.find((tag) => {\n                    return tag.value == label\n                }).color\n            }\n        }\n    },\n    methods: {\n        toggleIsImportant() {\n            this.isImportant = !this.isImportant;\n        },\n        toggleIsStarred() {\n            this.isStarred = !this.isStarred;\n        },\n        moveToTrash() {\n            this.isTrashed = !this.isTrashed;\n        },\n        editTodo() {\n            alert();\n        },\n        displayPrompt() {\n            this.$emit('showDisplayPrompt', this.todoItemId);\n        }\n    },\n}\n",{"version":3,"sources":["TodoItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TodoItem.vue","sourceRoot":"src/views/churcha2z/apps/todo","sourcesContent":["<!-- =========================================================================================\n    File Name: TodoItem.vue\n    Description: Single todo item component\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n    <div @click=\"displayPrompt\" class=\"px-8 py-4 list-item-component\">\n        <div class=\"vx-row\">\n            <div class=\"vx-col w-full sm:w-5/6 flex sm:items-center sm:flex-row flex-col\">\n                <div class=\"flex items-center\">\n                    <vs-checkbox v-model=\"isDone\" class=\"w-8 m-0 vs-checkbox-small\" @click.stop></vs-checkbox>\n                    <h6 class=\"todo-title\" :class=\"{'line-through': isDone}\">{{ title }}</h6>\n                </div>\n                <div class=\"todo-tags sm:ml-2 sm:my-0 my-2 flex\">\n                    <vs-chip v-for=\"(tag, index) in tags\" :key=\"index\">\n                        <div class=\"h-2 w-2 rounded-full mr-1\" :class=\"'bg-' + todoLabelColor(tag)\"></div>\n                        <span>{{ tag | capitalize }}</span>\n                    </vs-chip>\n                </div>\n            </div>\n\n            <div class=\"vx-col w-full sm:w-1/6 ml-auto flex sm:justify-end\">\n                <feather-icon icon=\"InfoIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-success stroke-current': isImportant}, 'w-5', 'h-5 mr-4']\" @click.stop=\"toggleIsImportant\"></feather-icon>\n                <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isStarred}, 'w-5', 'h-5 mr-4']\" @click.stop=\"toggleIsStarred\"></feather-icon>\n                <feather-icon icon=\"TrashIcon\" class=\"cursor-pointer\" svgClasses=\"w-5 h-5 mr-4\" @click.stop=\"moveToTrash\" v-if=\"!isTrashed\"></feather-icon>\n            </div>\n        </div>\n        <div class=\"vx-row\">\n            <div class=\"vx-col w-full\">\n                <p class=\"mt-2 truncate\" :class=\"{'line-through': isDone}\">{{ desc }}</p>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default{\n    props: {\n        todoItemId: {\n            type: Number,\n            required: true,\n        }\n    },\n    data() {\n        return {\n        }\n    },\n    computed: {\n        isImportant: {\n            get() {\n                return this.$store.state.todo.todoArray[this.todoItemId].isImportant;\n            },\n            set(value) {\n                this.$store.dispatch('todo/toggleIsImportant', { id: this.todoItemId, value: value})\n            }\n        },\n        isStarred: {\n            get() {\n                return this.$store.state.todo.todoArray[this.todoItemId].isStarred;\n            },\n            set(value) {\n                this.$store.dispatch('todo/toggleIsStarred', { id: this.todoItemId, value: value})\n            }\n        },\n        isTrashed: {\n            get() {\n                return this.$store.state.todo.todoArray[this.todoItemId].isTrashed;\n            },\n            set(value) {\n                this.$store.dispatch('todo/moveToTrash', { id: this.todoItemId, value: value})\n            }\n        },\n        title() {\n            return this.$store.state.todo.todoArray[this.todoItemId].title;\n        },\n        desc() {\n            return this.$store.state.todo.todoArray[this.todoItemId].desc;\n        },\n        tags() {\n            return this.$store.state.todo.todoArray[this.todoItemId].tags;\n        },\n        isDone: {\n            get () {\n                return this.$store.state.todo.todoArray[this.todoItemId].isDone;\n            },\n            set (value) {\n                var payload = { id: this.todoItemId, value: value}\n                this.$store.dispatch('todo/toggleIsDone', payload)\n            }\n        },\n        todoLabelColor() {\n            return (label) => {\n                const tags = this.$store.state.todo.todoTags;\n                return tags.find((tag) => {\n                    return tag.value == label\n                }).color\n            }\n        }\n    },\n    methods: {\n        toggleIsImportant() {\n            this.isImportant = !this.isImportant;\n        },\n        toggleIsStarred() {\n            this.isStarred = !this.isStarred;\n        },\n        moveToTrash() {\n            this.isTrashed = !this.isTrashed;\n        },\n        editTodo() {\n            alert();\n        },\n        displayPrompt() {\n            this.$emit('showDisplayPrompt', this.todoItemId);\n        }\n    },\n}\n</script>"]}]}