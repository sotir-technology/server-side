{"remainingRequest":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\todo\\TodoEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\todo\\TodoEdit.vue","mtime":1567376724913},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n    props: {\r\n        displayPrompt: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        todoItemId: {\r\n            type: Number,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            titleLocal: this.$store.state.todo.todoArray[this.todoItemId].title,\r\n            descLocal: this.$store.state.todo.todoArray[this.todoItemId].desc,\r\n            isDoneLocal: this.$store.state.todo.todoArray[this.todoItemId].isDone,\r\n            isImportantLocal: this.$store.state.todo.todoArray[this.todoItemId].isImportant,\r\n            isStarredLocal: this.$store.state.todo.todoArray[this.todoItemId].isStarred,\r\n            tagsLocal: this.$store.state.todo.todoArray[this.todoItemId].tags,\r\n        }\r\n    },\r\n    computed: {\r\n        activePrompt: {\r\n            get() {\r\n                return this.displayPrompt;\r\n            },\r\n            set(value) {\r\n                this.$emit('hideDisplayPrompt', value);\r\n            }\r\n        },\r\n        todoTags() {\r\n            return this.$store.state.todo.todoTags;\r\n        },\r\n        validateForm() {\r\n            return !this.errors.any() && this.titleLocal != '';\r\n        },\r\n        isTrashed: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isTrashed;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/moveToTrash', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        toggleIsImportant() {\r\n            this.isImportantLocal = !this.isImportantLocal;\r\n        },\r\n        toggleIsStarred() {\r\n            this.isStarredLocal = !this.isStarredLocal;\r\n        },\r\n        removeTodo() {\r\n            this.isTrashed = true;\r\n        },\r\n        init() {\r\n            this.titleLocal = this.$store.state.todo.todoArray[this.todoItemId].title;\r\n            this.descLocal = this.$store.state.todo.todoArray[this.todoItemId].desc;\r\n            this.isDoneLocal = this.$store.state.todo.todoArray[this.todoItemId].isDone;\r\n            this.isImportantLocal = this.$store.state.todo.todoArray[this.todoItemId].isImportant;\r\n            this.isStarredLocal = this.$store.state.todo.todoArray[this.todoItemId].isStarred;\r\n            this.tagsLocal = this.$store.state.todo.todoArray[this.todoItemId].tags;\r\n        },\r\n        submitTodo() {\r\n            this.$store.dispatch('todo/setTodoTitle', { id: this.todoItemId, title: this.titleLocal})\r\n            this.$store.dispatch('todo/setTodoDesc', { id: this.todoItemId, desc: this.descLocal})\r\n            this.$store.dispatch('todo/toggleIsImportant', { id: this.todoItemId, value: this.isImportantLocal})\r\n            this.$store.dispatch('todo/toggleIsStarred', { id: this.todoItemId, value: this.isStarredLocal})\r\n            this.$store.dispatch('todo/updateTags', { id: this.todoItemId, newTags: this.tagsLocal})\r\n            this.$store.dispatch('todo/toggleIsDone', { id: this.todoItemId, value: this.isDoneLocal})\r\n        }\r\n    },\r\n}\r\n",{"version":3,"sources":["TodoEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TodoEdit.vue","sourceRoot":"src/views/apps/todo","sourcesContent":["<!-- =========================================================================================\r\n    File Name: TodoEdit.vue\r\n    Description: Edit todo component\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <vs-prompt\r\n        vs-title=\"Edit Task\"\r\n        vs-accept-text= \"Submit\"\r\n        vs-cancel-text = \"Remove\"\r\n        vs-button-cancel = \"border\"\r\n        @vs-cancel=\"removeTodo\"\r\n        @vs-accept=\"submitTodo\"\r\n        @vs-close=\"init\"\r\n        :vs-is-valid=\"validateForm\"\r\n        :vs-active.sync=\"activePrompt\">\r\n        <div>\r\n            <form>\r\n                <div class=\"vx-row\">\r\n                    <div class=\"vx-col w-1/6 self-center\">\r\n                        <vs-checkbox v-model=\"isDoneLocal\" class=\"w-8\"></vs-checkbox>\r\n                    </div>\r\n\r\n                    <div class=\"vx-col ml-auto flex\">\r\n                        <feather-icon icon=\"InfoIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-success stroke-current': isImportantLocal}, 'w-5', 'h-5 mr-4']\" @click.prevent=\"toggleIsImportant\"></feather-icon>\r\n\r\n                        <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isStarredLocal}, 'w-5', 'h-5 mr-4']\" @click.prevent=\"toggleIsStarred\"></feather-icon>\r\n\r\n                        <vs-dropdown vs-custom-content>\r\n\r\n                            <feather-icon icon=\"TagIcon\" svgClasses=\"h-5 w-5\" @click.prevent></feather-icon>\r\n\r\n                            <vs-dropdown-menu style=\"z-index: 200001\">\r\n                                    <vs-dropdown-item v-for=\"(tag, index) in todoTags\" :key=\"index\">\r\n                                        <vs-checkbox @click.stop :vs-value=\"tag.value\" v-model=\"tagsLocal\">{{ tag.text }}</vs-checkbox>\r\n                                    </vs-dropdown-item>\r\n                            </vs-dropdown-menu>\r\n                        </vs-dropdown>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"vx-row\">\r\n                    <div class=\"vx-col w-full\">\r\n                        <vs-input v-validate=\"'required'\" name=\"title\" class=\"w-full mb-4 mt-5\" placeholder=\"Title\" v-model=\"titleLocal\" />\r\n                        <vs-textarea rows=\"5\" label=\"Add description\" v-model=\"descLocal\" />\r\n                    </div>  \r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    </vs-prompt>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        displayPrompt: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        todoItemId: {\r\n            type: Number,\r\n            required: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            titleLocal: this.$store.state.todo.todoArray[this.todoItemId].title,\r\n            descLocal: this.$store.state.todo.todoArray[this.todoItemId].desc,\r\n            isDoneLocal: this.$store.state.todo.todoArray[this.todoItemId].isDone,\r\n            isImportantLocal: this.$store.state.todo.todoArray[this.todoItemId].isImportant,\r\n            isStarredLocal: this.$store.state.todo.todoArray[this.todoItemId].isStarred,\r\n            tagsLocal: this.$store.state.todo.todoArray[this.todoItemId].tags,\r\n        }\r\n    },\r\n    computed: {\r\n        activePrompt: {\r\n            get() {\r\n                return this.displayPrompt;\r\n            },\r\n            set(value) {\r\n                this.$emit('hideDisplayPrompt', value);\r\n            }\r\n        },\r\n        todoTags() {\r\n            return this.$store.state.todo.todoTags;\r\n        },\r\n        validateForm() {\r\n            return !this.errors.any() && this.titleLocal != '';\r\n        },\r\n        isTrashed: {\r\n            get() {\r\n                return this.$store.state.todo.todoArray[this.todoItemId].isTrashed;\r\n            },\r\n            set(value) {\r\n                this.$store.dispatch('todo/moveToTrash', { id: this.todoItemId, value: value})\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        toggleIsImportant() {\r\n            this.isImportantLocal = !this.isImportantLocal;\r\n        },\r\n        toggleIsStarred() {\r\n            this.isStarredLocal = !this.isStarredLocal;\r\n        },\r\n        removeTodo() {\r\n            this.isTrashed = true;\r\n        },\r\n        init() {\r\n            this.titleLocal = this.$store.state.todo.todoArray[this.todoItemId].title;\r\n            this.descLocal = this.$store.state.todo.todoArray[this.todoItemId].desc;\r\n            this.isDoneLocal = this.$store.state.todo.todoArray[this.todoItemId].isDone;\r\n            this.isImportantLocal = this.$store.state.todo.todoArray[this.todoItemId].isImportant;\r\n            this.isStarredLocal = this.$store.state.todo.todoArray[this.todoItemId].isStarred;\r\n            this.tagsLocal = this.$store.state.todo.todoArray[this.todoItemId].tags;\r\n        },\r\n        submitTodo() {\r\n            this.$store.dispatch('todo/setTodoTitle', { id: this.todoItemId, title: this.titleLocal})\r\n            this.$store.dispatch('todo/setTodoDesc', { id: this.todoItemId, desc: this.descLocal})\r\n            this.$store.dispatch('todo/toggleIsImportant', { id: this.todoItemId, value: this.isImportantLocal})\r\n            this.$store.dispatch('todo/toggleIsStarred', { id: this.todoItemId, value: this.isStarredLocal})\r\n            this.$store.dispatch('todo/updateTags', { id: this.todoItemId, newTags: this.tagsLocal})\r\n            this.$store.dispatch('todo/toggleIsDone', { id: this.todoItemId, value: this.isDoneLocal})\r\n        }\r\n    },\r\n}\r\n</script>"]}]}