{"remainingRequest":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/revelation/VueJS/WnC_Apps/wc_admin/src/layouts/components/vx-sidebar/VxSidebarGroup.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/src/layouts/components/vx-sidebar/VxSidebarGroup.vue","mtime":1557525828000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/css-loader/index.js","mtime":1565173792486},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n@import \"@/assets/scss/vuesax/components/vxSidebarGroup.scss\"\r\n",{"version":3,"sources":["VxSidebarGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqMA","file":"VxSidebarGroup.vue","sourceRoot":"src/layouts/components/vx-sidebar","sourcesContent":["<!-- =========================================================================================\r\n\tFile Name: VxSidebarGroup.vue\r\n\tDescription: Sidebar Group Component. Extends vuesax framework's 'vs-sidebar-group' component\r\n\tComponent Name: VxSidebarGroup\r\n\t----------------------------------------------------------------------------------------\r\n\tItem Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n\tAuthor: Pixinvent\r\n\tAuthor URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n  <div\r\n    :class=\"[{'vs-sidebar-group-open' : openItems}, {'vs-sidebar-group-active': open}, {'disabled-item pointer-events-none': group.isDisabled}]\"\r\n    class=\"vs-sidebar-group\"\r\n    @mouseover=\"mouseover\"\r\n    @mouseout=\"mouseout\">\r\n\t<div @click=\"clickGroup\" class=\"group-header w-full\">\r\n\t\t<span class=\"flex items-center w-full\">\r\n\t\t\t<feather-icon :icon=\"group.icon || 'CircleIcon'\" :svgClasses=\"{ 'w-3 h-3' : this.groupIndex % 1 != 0 }\" v-if=\"group.icon || (this.groupIndex > Math.floor(this.groupIndex))\" />\r\n\t\t\t<span v-show=\"!sidebarItemsMin\" class=\"truncate mr-3\">{{ $t(group.i18n) || group.name }}</span>\r\n\t\t\t<vs-chip class=\"ml-auto mr-4\" :color=\"group.tagColor\" v-if=\"group.tag && !sidebarItemsMin\">{{ group.tag }}</vs-chip>\r\n\t\t</span>\r\n\t\t<feather-icon icon=\"ChevronRightIcon\" svg-classes=\"w-4 h-4\" :class=\"[{'rotate90' : openItems}, 'feather-grp-header-arrow']\" v-show=\"!sidebarItemsMin\" />\r\n\t\t<span class=\"vs-sidebar--tooltip\">{{ $t(group.i18n) || group.name }}</span>\r\n    </div>\r\n    <ul ref=\"items\" :style=\"styleItems\" class=\"vs-sidebar-group-items\">\r\n      <li v-for=\"(groupItem, index) in group.submenu\" :key=\"index\">\r\n\t\t<vx-sidebar-group :group=\"groupItem\" :groupIndex=\"Number(`${groupIndex}.${index}`)\" :open=\"isGroupActive(groupItem)\" :openHover=\"openHover\" v-if=\"groupItem.submenu\" />\r\n\t\t<vx-sidebar-item :index=\"groupIndex + '.' + index\" :to=\"groupItem.url\" :icon=\"itemIcon(groupIndex + '.' + index)\" icon-small :target=\"groupItem.target\" v-else>\r\n\t\t\t<span class=\"truncate\">{{ $t(groupItem.i18n) || groupItem.name }}</span>\r\n\t\t\t<vs-chip class=\"ml-auto\" :color=\"groupItem.tagColor\" v-if=\"groupItem.tag\">{{ groupItem.tag }}</vs-chip>\r\n\t\t</vx-sidebar-item>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VxSidebarItem from './VxSidebarItem.vue'\r\n\r\nexport default {\r\n    name: 'vx-sidebar-group',\r\n    props: {\r\n        openHover: {\r\n            default: false,\r\n            type: Boolean\r\n        },\r\n        open: {\r\n            default: false,\r\n            type: Boolean\r\n        },\r\n        group: {\r\n            type: Object\r\n        },\r\n        groupIndex: {\r\n            type: Number,\r\n        },\r\n    },\r\n    data: () => ({\r\n        maxHeight: '0px',\r\n        openItems: false\r\n    }),\r\n    computed: {\r\n        sidebarItemsMin() {\r\n            return this.$store.state.sidebarItemsMin;\r\n        },\r\n        styleItems() {\r\n            return {\r\n                maxHeight: this.maxHeight\r\n            }\r\n        },\r\n        itemIcon() {\r\n            return (index) => {\r\n                if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\"\r\n            }\r\n        },\r\n        isGroupActive() {\r\n            return (sidebarItem) => {\r\n\r\n                const path = this.$route.fullPath;\r\n                let open = false;\r\n                let func = function(sidebarItem) {\r\n                    if (sidebarItem.submenu) {\r\n                        sidebarItem.submenu.forEach((item) => {\r\n                            if (path == item.url) {\r\n                                open = true\r\n                            } else if (item.submenu) {\r\n                                func(item)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n                func(sidebarItem)\r\n                return open\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\r\n        '$route'() {\r\n\t\t\tif(this.sidebarItemsMin) return\r\n            let scrollHeight = this.scrollHeight\r\n            if (this.openItems && !this.open) {\r\n                this.maxHeight = `${scrollHeight}px`\r\n                setTimeout(() => {\r\n                    this.maxHeight = `${0}px`\r\n                }, 50)\r\n            } else if (this.open) {\r\n                this.maxHeight = `${scrollHeight}px`\r\n                setTimeout(() => {\r\n                    this.maxHeight = 'none'\r\n                }, 300)\r\n            }\r\n        },\r\n        maxHeight() {\r\n            this.openItems = this.maxHeight != '0px'\r\n        },\r\n        // OPEN AND CLOSES DROPDOWN MENU ON SIDEBAR COLLAPSE AND DEFAULT VIEW\r\n        '$store.state.sidebarItemsMin'(val) {\r\n            let scrollHeight = this.$refs.items.scrollHeight\r\n            if (!val && this.open) {\r\n                this.maxHeight = `${scrollHeight}px`\r\n                setTimeout(() => {\r\n                    this.maxHeight = 'none'\r\n                }, 300)\r\n            } else {\r\n                this.maxHeight = `${scrollHeight}px`\r\n                setTimeout(() => {\r\n                    this.maxHeight = '0px'\r\n                }, 50)\r\n            }\r\n            if(val && this.open) {\r\n\t\t\t\tthis.maxHeight = `${scrollHeight}px`\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.maxHeight = '0px'\r\n\t\t\t\t}, 250)\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        clickGroup() {\r\n            if (!this.openHover) {\r\n                let thisScrollHeight = this.$refs.items.scrollHeight\r\n                if (this.maxHeight == '0px') {\r\n                    this.maxHeight = `${thisScrollHeight}px`\r\n                    setTimeout(() => {\r\n                        this.maxHeight = 'none'\r\n                    }, 300)\r\n                } else {\r\n                    this.maxHeight = `${thisScrollHeight}px`\r\n                    setTimeout(() => {\r\n                        this.maxHeight = `${0}px`\r\n                    }, 50)\r\n                }\r\n\r\n                this.$parent.$children.map((child) => {\r\n                    if (child.isGroupActive) {\r\n\r\n                        if (child !== this && (!child.open) && child.maxHeight != '0px') {\r\n                            setTimeout(() => {\r\n                                child.maxHeight = `${0}px`\r\n                            }, 50)\r\n                        }\r\n                    }\r\n                })\r\n\r\n\r\n            }\r\n        },\r\n        mouseover() {\r\n            if (this.openHover) {\r\n                let scrollHeight = this.$refs.items.scrollHeight\r\n                this.maxHeight = `${scrollHeight}px`\r\n            }\r\n        },\r\n        mouseout() {\r\n            if (this.openHover) {\r\n                let scrollHeight = 0\r\n                this.maxHeight = `${scrollHeight}px`\r\n            }\r\n        }\r\n    },\r\n    components: {\r\n        VxSidebarItem\r\n    },\r\n    mounted() {\r\n        this.openItems = this.open\r\n        if (this.open) {\r\n            this.maxHeight = 'none'\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuesax/components/vxSidebarGroup.scss\"\r\n</style>"]}]}