{"remainingRequest":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/revelation/VueJS/WnC_Apps/wc_admin/src/layouts/components/vx-sidebar/VxSidebar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/src/layouts/components/vx-sidebar/VxSidebar.vue","mtime":1565193529497},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/css-loader/index.js","mtime":1565173792486},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/revelation/VueJS/WnC_Apps/wc_admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n@import \"@/assets/scss/vuesax/components/vxSidebar.scss\"\r\n",{"version":3,"sources":["VxSidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0OA","file":"VxSidebar.vue","sourceRoot":"src/layouts/components/vx-sidebar","sourcesContent":["<!-- =========================================================================================\r\n    File Name: VxSidebar.vue\r\n    Description: Sidebar Component\r\n    Component Name: VxSidebar\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <div class=\"parentx\">\r\n        <vs-sidebar ref=\"mainSidebar\" :parent=\"parent\" :hiddenBackground=\"clickNotClose\" :reduce=\"reduce\" default-index=\"-1\" class=\"sidebarx main-menu-sidebar items-no-padding\" v-model=\"isSidebarActive\" :click-not-close=\"clickNotClose\" :reduce-not-rebound=\"reduceNotRebound\">\r\n            <div @mouseenter=\"sidebarMouseEntered\" @mouseleave=\"sidebarMouseLeave\">\r\n                <div class=\"header-sidebar flex items-end justify-between\" slot=\"header\">\r\n                    <div class=\"logo flex items-center\">\r\n                        <img :src=\"logo\" alt=\"logo\" class=\"w-10 mr-4\" v-if=\"logo\">\r\n                        <span class=\"logo-text\" v-show=\"isMouseEnter || !reduce\" v-if=\"title\">{{ title }}</span>\r\n                    </div>\r\n                    <div>\r\n                        <template v-if=\"showCloseButton\">\r\n                            <feather-icon icon=\"XIcon\" class=\"m-0 cursor-pointer\" style=\"color: red\" @click=\"$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false)\"></feather-icon>\r\n                        </template>\r\n<!--                        <template v-else-if=\"!showCloseButton && !sidebarItemsMin\">-->\r\n<!--                            <feather-icon icon=\"DiscIcon\" class=\"mr-0 cursor-pointer\" svg-classes=\"stroke-current\" v-show=\"!reduce\" @click=\"toggleReduce(true)\" id=\"btnSidebarToggler\"></feather-icon>-->\r\n<!--                            <feather-icon icon=\"CircleIcon\" class=\"mr-0 cursor-pointer\" svg-classes=\"stroke-current\" v-show=\"reduce\" @click=\"toggleReduce(false)\" id=\"btnSidebarToggler\"></feather-icon>-->\r\n<!--                        </template>-->\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"shadow-bottom\" v-show=\"showShadowBottom\"></div>\r\n\r\n                <VuePerfectScrollbar ref=\"mainSidebarPs\" class=\"scroll-area--main-sidebar pt-2\" :settings=\"settings\" @ps-scroll-y=\"psSectionScroll\">\r\n                    <template v-for=\"(sidebarItem, index) in sidebarItems\">\r\n\r\n                        <!-- GROUP ITEM HEADER -->\r\n                        <span :key=\"`header-${index}`\" v-if=\"sidebarItem.header && !sidebarItemsMin\" class=\"navigation-header truncate\">{{ $t(sidebarItem.i18n) || sidebarItem.header }}</span>\r\n                        <template v-else-if=\"!sidebarItem.header\">\r\n\r\n                            <!-- IF IT'S SINGLE ITEM -->\r\n                            <vx-sidebar-item ref=\"sidebarLink\" :key=\"`sidebarItem-${index}`\" v-if=\"!sidebarItem.submenu\" :index=\"index\" :to=\"sidebarItem.slug != 'external' ? sidebarItem.url : ''\" :href=\"sidebarItem.slug == 'external' ? sidebarItem.url : ''\" :icon=\"sidebarItem.icon\" :target=\"sidebarItem.target\" :isDisabled=\"sidebarItem.isDisabled\">\r\n                                <span v-show=\"!sidebarItemsMin\" class=\"truncate\">{{ $t(sidebarItem.i18n) || sidebarItem.name }}</span>\r\n                                <vs-chip class=\"ml-auto\" :color=\"sidebarItem.tagColor\" v-if=\"sidebarItem.tag && (isMouseEnter || !reduce)\">{{ sidebarItem.tag }}</vs-chip>\r\n                            </vx-sidebar-item>\r\n\r\n                            <!-- IF HAVE SUBMENU / DROPDOWN -->\r\n                            <template v-else>\r\n                                <vx-sidebar-group ref=\"sidebarGrp\" :key=\"`group-${index}`\" :openHover=\"openGroupHover\" :group=\"sidebarItem\" :groupIndex=\"index\" :open=\"isGroupActive(sidebarItem)\"></vx-sidebar-group>\r\n                            </template>\r\n                        </template>\r\n                    </template>\r\n                </VuePerfectScrollbar>\r\n            </div>\r\n        </vs-sidebar>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport VxSidebarGroup from './VxSidebarGroup.vue';\r\nimport VxSidebarItem  from './VxSidebarItem.vue';\r\n\r\nexport default {\r\n    name: 'vx-sidebar',\r\n    props: {\r\n        sidebarItems: {\r\n            type: Array,\r\n            required: true,\r\n        },\r\n        title: {\r\n            type: String,\r\n        },\r\n        logo: {\r\n            type: String\r\n        },\r\n        parent: {\r\n            type: String\r\n        },\r\n        openGroupHover: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        reduceNotRebound: {\r\n            type: Boolean,\r\n            default: true,\r\n        }\r\n    },\r\n    data: () => ({\r\n        clickNotClose: false, // disable close sidebar on outside click\r\n        reduce: false, // determines if sidebar is reduce - component property\r\n        showCloseButton: false, // show close button in smaller devices\r\n        isMouseEnter: false,\r\n        settings: { // perfectscrollbar settings\r\n            maxScrollbarLength: 60,\r\n            wheelSpeed: 1,\r\n            swipeEasing: true\r\n        },\r\n        windowWidth: window.innerWidth, //width of windows\r\n        showShadowBottom: false,\r\n    }),\r\n    computed: {\r\n        isSidebarActive: {\r\n            get() {\r\n                return this.$store.state.isSidebarActive\r\n            },\r\n            set(val) {\r\n              this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', val)\r\n            }\r\n        },\r\n        reduceSidebar() {\r\n            return Boolean(this.reduce && this.reduceButton)\r\n        },\r\n        reduceButton: {\r\n            get() {\r\n                return this.$store.state.reduceButton;\r\n            },\r\n            set(val) {\r\n                this.$store.commit('TOGGLE_REDUCE_BUTTON', val)\r\n            }\r\n        },\r\n        sidebarItemsMin() {\r\n            return this.$store.state.sidebarItemsMin;\r\n        },\r\n        isGroupActive() {\r\n            return (sidebarItem) => {\r\n                const path = this.$route.fullPath;\r\n                let open = false;\r\n                let func = function(sidebarItem) {\r\n                    if (sidebarItem.submenu) {\r\n                        sidebarItem.submenu.forEach((item) => {\r\n                            if (path == item.url) { open = true }\r\n                            else if (item.submenu) { func(item) }\r\n                        })\r\n                    }\r\n                }\r\n                func(sidebarItem)\r\n                return open\r\n            }\r\n        },\r\n    },\r\n    watch: {\r\n        reduce(val) {\r\n\r\n            if (val == true) {\r\n                this.$store.dispatch('updateSidebarWidth', 'reduced');\r\n\r\n            } else {\r\n                this.$store.dispatch('updateSidebarWidth', 'default');\r\n            }\r\n\r\n            setTimeout(function(){\r\n                window.dispatchEvent(new Event('resize'));\r\n            }, 100);\r\n        },\r\n        reduceButton() {\r\n            this.setSidebarWidth();\r\n        },\r\n        '$route'() {\r\n            if(this.isSidebarActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false);\r\n        },\r\n    },\r\n    methods: {\r\n        sidebarMouseEntered() {\r\n            if (this.reduce) this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\r\n            this.isMouseEnter = true;\r\n        },\r\n        sidebarMouseLeave() {\r\n            if (this.reduce) {\r\n                this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', true);\r\n            }\r\n            this.isMouseEnter = false;\r\n        },\r\n        toggleReduce(val) {\r\n            this.reduceButton = val;\r\n            this.setSidebarWidth();\r\n        },\r\n        handleWindowResize(event) {\r\n            this.windowWidth = event.currentTarget.innerWidth;\r\n            this.setSidebarWidth();\r\n        },\r\n        setSidebarWidth() {\r\n            if (this.windowWidth < 1200) {\r\n                if(this.windowWidth < 992) this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'md')\r\n                else this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'lg')\r\n\r\n                this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', false)\r\n                if (this.reduceButton) this.reduce = false;\r\n                // this.reduceButton = false;\r\n                this.showCloseButton = true;\r\n                this.clickNotClose = false;\r\n                this.$store.dispatch('updateSidebarWidth', 'no-sidebar')\r\n                this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\r\n            }\r\n            else {\r\n                this.$store.commit('UPDATE_WINDOW_BREAKPOINT', 'xl')\r\n                if (this.reduceButton) this.reduce = true;\r\n                else this.reduce = false;\r\n\r\n                this.$store.commit('TOGGLE_IS_SIDEBAR_ACTIVE', true)\r\n                if (this.reduceButton && !this.isMouseEnter) this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', true)\r\n                else this.$store.commit('UPDATE_SIDEBAR_ITEMS_MIN', false)\r\n\r\n                this.clickNotClose = true;\r\n                this.showCloseButton = false;\r\n                if (this.reduceSidebar)\r\n                    this.$store.dispatch('updateSidebarWidth', 'reduced')\r\n                else\r\n                    this.$store.dispatch('updateSidebarWidth', 'default')\r\n            }\r\n        },\r\n        psSectionScroll() {\r\n            if(this.$refs.mainSidebarPs.$el.scrollTop > 0) this.showShadowBottom = true;\r\n            else this.showShadowBottom = false;\r\n        },\r\n    },\r\n    components: {\r\n        VxSidebarGroup,\r\n        VxSidebarItem,\r\n        VuePerfectScrollbar,\r\n    },\r\n    mounted() {\r\n        this.$nextTick(() => {\r\n            window.addEventListener('resize', this.handleWindowResize);\r\n        });\r\n        this.setSidebarWidth();\r\n    },\r\n    beforeDestroy() {\r\n        window.removeEventListener('resize', this.handleWindowResize);\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuesax/components/vxSidebar.scss\"\r\n</style>\r\n"]}]}