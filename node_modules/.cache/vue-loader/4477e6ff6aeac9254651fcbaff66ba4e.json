{"remainingRequest":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\chat\\Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\src\\views\\apps\\chat\\Chat.vue","mtime":1567376724788},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\GIT\\server-side\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport contacts from './contacts'\r\nimport ChatContact from \"./ChatContact.vue\"\r\nimport UserProfile from \"./UserProfile.vue\"\r\nimport ChatNavbar from './ChatNavbar.vue'\r\nimport ChatLog from './ChatLog.vue'\r\n\r\nexport default{\r\n    name: 'vx-sidebar',\r\n    data() {\r\n        return {\r\n            active: true,\r\n            isHidden: false,\r\n            contacts: contacts,\r\n            searchContact: \"\",\r\n            activeProfileSidebar: false,\r\n            activeChatUser: null,\r\n            userProfileId: -1,\r\n            typedMessage: \"\",\r\n            isChatPinned: false,\r\n            settings: {\r\n                maxScrollbarLength: 60,\r\n                wheelSpeed: 0.70,\r\n            },\r\n            clickNotClose: true,\r\n            isChatSidebarActive: true,\r\n            windowWidth: window.innerWidth,\r\n        }\r\n    },\r\n    computed: {\r\n        chatLastMessaged() {\r\n            return (userId) => this.$store.getters['chat/chatLastMessaged'](userId);\r\n        },\r\n        chatUnseenMessages() {\r\n            return (userId) => {\r\n                const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId);\r\n                if(unseenMsg) return unseenMsg\r\n            };\r\n        },\r\n        sorted() {\r\n            return this.chats.slice().sort((x,y) => {\r\n                const xId = x.id;\r\n                const yId = y.id;\r\n                const chatDataX = this.$store.getters['chat/chatDataOfUser'](xId);\r\n                const chatDataY = this.$store.getters['chat/chatDataOfUser'](yId);\r\n                return (chatDataY.isPinned - chatDataX.isPinned)\r\n            })\r\n        },\r\n        activeUserId() {\r\n            return this.$store.state.AppActiveUser.id;\r\n        },\r\n        activeUserImg() {\r\n            return this.$store.state.AppActiveUser.img;\r\n        },\r\n        activeUserStatus() {\r\n            return this.$store.state.AppActiveUser.status;\r\n        },\r\n        getStatusColor() {\r\n            return (isActiveUser) => {\r\n                const userStatus = this.getUserStatus(isActiveUser)\r\n\r\n                if(userStatus == \"online\"){\r\n                    return \"success\"\r\n                }else if(userStatus == \"do not disturb\"){\r\n                    return \"danger\"\r\n                }else if(userStatus == \"away\"){\r\n                    return \"warning\"\r\n                }else{\r\n                    return \"grey\"               \r\n                }\r\n            }\r\n        },\r\n        chats() {\r\n            return this.$store.getters['chat/chats'];\r\n        },\r\n        chatContacts() {\r\n            return this.$store.getters['chat/chatcontacts'];\r\n        },\r\n        searchQuery: {\r\n            get() {\r\n                return this.$store.state.chat.chatSearchQuery;\r\n            },\r\n            set(val) {\r\n                this.$store.dispatch('chat/setChatSearchQuery', val);\r\n            }\r\n        },\r\n        isActiveChatUser() {\r\n            return (userId) => userId == this.activeChatUser\r\n        }\r\n    },\r\n    methods: {\r\n        getUserStatus(isActiveUser) {\r\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\r\n        },\r\n        closeProfileSidebar(value) {\r\n            this.activeProfileSidebar = value\r\n        },\r\n        updateUserProfileId(userId) {\r\n            this.userProfileId = userId;\r\n            this.activeProfileSidebar = !this.activeProfileSidebar;\r\n        },\r\n        updateActiveChatUser(contactId) {\r\n            this.activeChatUser = contactId;\r\n            if(this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\r\n                this.$store.dispatch('chat/markSeenAllMessages', contactId)\r\n            }\r\n            let chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser);\r\n            if(chatData) this.isChatPinned = chatData.isPinned;\r\n            else this.isChatPinned = false\r\n            this.toggleChatSidebar();\r\n            this.typedMessage = '';\r\n        },\r\n        showProfileSidebar(userId) {\r\n            this.userProfileId = userId;\r\n            this.activeProfileSidebar = !this.activeProfileSidebar;\r\n        },\r\n        sendMsg() {\r\n            if(!this.typedMessage) return\r\n            const payload = {\r\n                isPinned: this.isChatPinned,\r\n                'msg': {\r\n                    'textContent': this.typedMessage,\r\n                    'time': String(new Date()),\r\n                    'isSent': true,\r\n                    'isSeen': false,\r\n                },\r\n                'id': this.activeChatUser\r\n            }\r\n            this.$store.dispatch('chat/sendChatMessage', payload)\r\n            this.typedMessage = '';\r\n            this.$refs.chatLogPS.$el.scrollTop = this.$refs.chatLog.scrollHeight;\r\n        },\r\n        toggleIsChatPinned(value) {\r\n            this.isChatPinned = value;\r\n        },\r\n        handleWindowResize(event) {\r\n            this.windowWidth = event.currentTarget.innerWidth;\r\n            this.setSidebarWidth();\r\n        },\r\n        setSidebarWidth() {\r\n            if(this.windowWidth < 1200) {\r\n                this.isChatSidebarActive = this.clickNotClose = false;\r\n            }else {\r\n                this.isChatSidebarActive = this.clickNotClose = true;\r\n            }\r\n        },\r\n        toggleChatSidebar(value = false) {\r\n            if(!value && this.clickNotClose) return\r\n            this.isChatSidebarActive = value;\r\n        }\r\n    },\r\n    components: {\r\n        VuePerfectScrollbar,\r\n        ChatContact,\r\n        UserProfile,\r\n        ChatNavbar,\r\n        ChatLog,\r\n    },\r\n    created() {\r\n        this.$nextTick(() => {\r\n            window.addEventListener('resize', this.handleWindowResize);\r\n        })\r\n        this.setSidebarWidth();\r\n    },\r\n    beforeDestroy: function () {\r\n        window.removeEventListener('resize', this.handleWindowResize)\r\n    },\r\n}\r\n",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\r\n    File Name: Chat.vue\r\n    Description: Chat Application - Stay connected\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <div id=\"chat-app\" class=\"border border-solid border-grey-light rounded relative overflow-hidden\">\r\n        <vs-sidebar class=\"items-no-padding\" parent=\"#chat-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isChatSidebarActive\" id=\"chat-list-sidebar\">\r\n\r\n            <!-- USER PROFILE SIDEBAR -->\r\n            <user-profile :active=\"activeProfileSidebar\" :userId=\"userProfileId\" class=\"user-profile-container\" @closeProfileSidebar=\"closeProfileSidebar\"></user-profile>\r\n            \r\n            <div class=\"chat__profile-search flex p-4\">\r\n                <div class=\"relative inline-flex\">\r\n                    <vs-avatar class=\"m-0\" :src=\"require(`@/assets/images/portrait/small/${activeUserImg}`)\" size=\"40px\" @click=\"showProfileSidebar(activeUserId)\" />\r\n                    <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute pin-r pin-b\" :class=\"'bg-' + getStatusColor(true)\"></div>\r\n                </div>\r\n                <vs-input icon=\"icon-search\" icon-pack=\"feather\" class=\"w-full mx-5 input-rounded-full no-icon-border\" placeholder=\"Search or start a new chat\" v-model=\"searchQuery\"/>\r\n            </div>\r\n\r\n            <vs-divider class=\"border-grey-light m-0\" />\r\n            <VuePerfectScrollbar class=\"chat-scroll-area pt-4\" :settings=\"settings\">\r\n\r\n                <!-- ACTIVE CHATS LIST -->\r\n                <div class=\"chat__chats-list mb-8\">\r\n                    <h3 class=\"text-primary mb-5 px-4\">Chats</h3>\r\n                    <ul class=\"chat__active-chats bordered-items\">\r\n                        <li class=\"cursor-pointer\" v-for=\"(contact, index) in sorted\" :key=\"index\" @click=\"updateActiveChatUser(contact.id)\">\r\n                            <chat-contact :contact=\"contact\" :lastMessaged=\"chatLastMessaged(contact.id).time\" :unseenMsg=\"chatUnseenMessages(contact.id)\" :isActiveChatUser=\"isActiveChatUser(contact.id)\"></chat-contact>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                        \r\n                        \r\n                <!-- CONTACTS LIST -->\r\n                <div class=\"chat__contacts\">\r\n                    <h3 class=\"text-primary mb-5 px-4\">Contacts</h3>\r\n                    <ul class=\"chat__contacts bordered-items\">\r\n                        <li class=\"cursor-pointer\" v-for=\"contact in chatContacts\" :key=\"contact.id\" @click=\"updateActiveChatUser(contact.id)\">\r\n                            <chat-contact :contact=\"contact\"></chat-contact>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </VuePerfectScrollbar>\r\n        </vs-sidebar>\r\n\r\n        <!-- RIGHT COLUMN -->\r\n        <div class=\"chat__bg app-fixed-height chat-content-area border border-solid border-grey-light border-t-0 border-r-0 border-b-0\" :class=\"{'sidebar-spacer--wide': clickNotClose, 'flex items-center justify-center': activeChatUser === null}\">\r\n            <template v-if=\"activeChatUser\">\r\n                <div class=\"chat__navbar\">\r\n                    <chat-navbar :isSidebarCollapsed=\"!clickNotClose\" :user-id=\"activeChatUser\" :isPinnedProp=\"isChatPinned\" @openContactsSidebar=\"toggleChatSidebar(true)\" @showProfileSidebar=\"updateUserProfileId\" @toggleIsChatPinned=\"toggleIsChatPinned\"></chat-navbar>\r\n                </div>\r\n                <VuePerfectScrollbar class=\"chat-content-scroll-area border border-solid border-grey-light\" :settings=\"settings\" ref=\"chatLogPS\">\r\n                    <div class=\"chat__log\" ref=\"chatLog\">\r\n                        <chat-log :userId=\"activeChatUser\" v-if=\"activeChatUser\"></chat-log>\r\n                    </div>\r\n                </VuePerfectScrollbar>\r\n                <div class=\"chat__input flex p-4 bg-white\">\r\n                    <vs-input class=\"flex-1\" placeholder=\"Type Your Message\" v-model=\"typedMessage\" @keyup.enter=\"sendMsg\" />\r\n                    <vs-button class=\"bg-primary-gradient ml-4\" type=\"filled\" @click=\"sendMsg\">Send</vs-button>\r\n                </div>\r\n            </template>\r\n            <template v-else>\r\n                <div class=\"flex flex-col items-center\">\r\n                    <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\r\n                    <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"toggleChatSidebar(true)\">Start Conversation</h4>\r\n                </div>\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport contacts from './contacts'\r\nimport ChatContact from \"./ChatContact.vue\"\r\nimport UserProfile from \"./UserProfile.vue\"\r\nimport ChatNavbar from './ChatNavbar.vue'\r\nimport ChatLog from './ChatLog.vue'\r\n\r\nexport default{\r\n    name: 'vx-sidebar',\r\n    data() {\r\n        return {\r\n            active: true,\r\n            isHidden: false,\r\n            contacts: contacts,\r\n            searchContact: \"\",\r\n            activeProfileSidebar: false,\r\n            activeChatUser: null,\r\n            userProfileId: -1,\r\n            typedMessage: \"\",\r\n            isChatPinned: false,\r\n            settings: {\r\n                maxScrollbarLength: 60,\r\n                wheelSpeed: 0.70,\r\n            },\r\n            clickNotClose: true,\r\n            isChatSidebarActive: true,\r\n            windowWidth: window.innerWidth,\r\n        }\r\n    },\r\n    computed: {\r\n        chatLastMessaged() {\r\n            return (userId) => this.$store.getters['chat/chatLastMessaged'](userId);\r\n        },\r\n        chatUnseenMessages() {\r\n            return (userId) => {\r\n                const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId);\r\n                if(unseenMsg) return unseenMsg\r\n            };\r\n        },\r\n        sorted() {\r\n            return this.chats.slice().sort((x,y) => {\r\n                const xId = x.id;\r\n                const yId = y.id;\r\n                const chatDataX = this.$store.getters['chat/chatDataOfUser'](xId);\r\n                const chatDataY = this.$store.getters['chat/chatDataOfUser'](yId);\r\n                return (chatDataY.isPinned - chatDataX.isPinned)\r\n            })\r\n        },\r\n        activeUserId() {\r\n            return this.$store.state.AppActiveUser.id;\r\n        },\r\n        activeUserImg() {\r\n            return this.$store.state.AppActiveUser.img;\r\n        },\r\n        activeUserStatus() {\r\n            return this.$store.state.AppActiveUser.status;\r\n        },\r\n        getStatusColor() {\r\n            return (isActiveUser) => {\r\n                const userStatus = this.getUserStatus(isActiveUser)\r\n\r\n                if(userStatus == \"online\"){\r\n                    return \"success\"\r\n                }else if(userStatus == \"do not disturb\"){\r\n                    return \"danger\"\r\n                }else if(userStatus == \"away\"){\r\n                    return \"warning\"\r\n                }else{\r\n                    return \"grey\"               \r\n                }\r\n            }\r\n        },\r\n        chats() {\r\n            return this.$store.getters['chat/chats'];\r\n        },\r\n        chatContacts() {\r\n            return this.$store.getters['chat/chatcontacts'];\r\n        },\r\n        searchQuery: {\r\n            get() {\r\n                return this.$store.state.chat.chatSearchQuery;\r\n            },\r\n            set(val) {\r\n                this.$store.dispatch('chat/setChatSearchQuery', val);\r\n            }\r\n        },\r\n        isActiveChatUser() {\r\n            return (userId) => userId == this.activeChatUser\r\n        }\r\n    },\r\n    methods: {\r\n        getUserStatus(isActiveUser) {\r\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\r\n        },\r\n        closeProfileSidebar(value) {\r\n            this.activeProfileSidebar = value\r\n        },\r\n        updateUserProfileId(userId) {\r\n            this.userProfileId = userId;\r\n            this.activeProfileSidebar = !this.activeProfileSidebar;\r\n        },\r\n        updateActiveChatUser(contactId) {\r\n            this.activeChatUser = contactId;\r\n            if(this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\r\n                this.$store.dispatch('chat/markSeenAllMessages', contactId)\r\n            }\r\n            let chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser);\r\n            if(chatData) this.isChatPinned = chatData.isPinned;\r\n            else this.isChatPinned = false\r\n            this.toggleChatSidebar();\r\n            this.typedMessage = '';\r\n        },\r\n        showProfileSidebar(userId) {\r\n            this.userProfileId = userId;\r\n            this.activeProfileSidebar = !this.activeProfileSidebar;\r\n        },\r\n        sendMsg() {\r\n            if(!this.typedMessage) return\r\n            const payload = {\r\n                isPinned: this.isChatPinned,\r\n                'msg': {\r\n                    'textContent': this.typedMessage,\r\n                    'time': String(new Date()),\r\n                    'isSent': true,\r\n                    'isSeen': false,\r\n                },\r\n                'id': this.activeChatUser\r\n            }\r\n            this.$store.dispatch('chat/sendChatMessage', payload)\r\n            this.typedMessage = '';\r\n            this.$refs.chatLogPS.$el.scrollTop = this.$refs.chatLog.scrollHeight;\r\n        },\r\n        toggleIsChatPinned(value) {\r\n            this.isChatPinned = value;\r\n        },\r\n        handleWindowResize(event) {\r\n            this.windowWidth = event.currentTarget.innerWidth;\r\n            this.setSidebarWidth();\r\n        },\r\n        setSidebarWidth() {\r\n            if(this.windowWidth < 1200) {\r\n                this.isChatSidebarActive = this.clickNotClose = false;\r\n            }else {\r\n                this.isChatSidebarActive = this.clickNotClose = true;\r\n            }\r\n        },\r\n        toggleChatSidebar(value = false) {\r\n            if(!value && this.clickNotClose) return\r\n            this.isChatSidebarActive = value;\r\n        }\r\n    },\r\n    components: {\r\n        VuePerfectScrollbar,\r\n        ChatContact,\r\n        UserProfile,\r\n        ChatNavbar,\r\n        ChatLog,\r\n    },\r\n    created() {\r\n        this.$nextTick(() => {\r\n            window.addEventListener('resize', this.handleWindowResize);\r\n        })\r\n        this.setSidebarWidth();\r\n    },\r\n    beforeDestroy: function () {\r\n        window.removeEventListener('resize', this.handleWindowResize)\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuesax/apps/chat.scss\";\r\n</style>"]}]}